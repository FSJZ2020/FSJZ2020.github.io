<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FSJZ</title>
  
  
  <link href="https://fsjz2020.github.io/atom.xml" rel="self"/>
  
  <link href="https://fsjz2020.github.io/"/>
  <updated>2022-06-06T07:26:28.110Z</updated>
  <id>https://fsjz2020.github.io/</id>
  
  <author>
    <name>FSJZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>yaml学习</title>
    <link href="https://fsjz2020.github.io/2022/06/05/yaml%E5%AD%A6%E4%B9%A0/"/>
    <id>https://fsjz2020.github.io/2022/06/05/yaml%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-06-05T08:47:06.000Z</published>
    <updated>2022-06-06T07:26:28.110Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/06/05/yaml%E5%AD%A6%E4%B9%A0/u=3348710092,4003996263&fm=253&fmt=auto&app=138&f=JPEG.jpeg" alt="img" style="zoom:50%;"></p><span id="more"></span><p>YAML是一个可读性高，用来表达数据序列化的格式，后缀<code>.yaml</code>或<code>.yml</code>。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><ul><li>使用缩进表示层级关系</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li><h1 id="表示注释"><a href="#表示注释" class="headerlink" title="表示注释"></a>表示注释</h1></li></ul><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><p>纯量、数组、对象</p><h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p>null或~表示空值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#comment here</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">5.6</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">stdin:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">image:</span> <span class="literal">null</span></span><br><span class="line"><span class="comment">#date and time</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-06-05T15:00:00+02:00</span></span><br><span class="line"></span><br><span class="line"><span class="attr">singleLineString:</span> <span class="string">&gt;-</span> <span class="comment">#&gt;表示多行文字，且每行文字后的回车以空格替换，-表示不要最后一行的回车</span></span><br><span class="line">  <span class="string">This</span> <span class="string">is</span> <span class="string">a</span> <span class="string">single</span> <span class="string">line</span> <span class="string">string</span></span><br><span class="line">  <span class="string">another</span> <span class="string">line</span></span><br><span class="line">  <span class="string">and</span> <span class="string">another</span></span><br><span class="line"><span class="attr">OtherLineString:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  This is a single line string</span></span><br><span class="line"><span class="string">  another line</span></span><br><span class="line"><span class="string">  and another</span></span><br><span class="line"><span class="string"></span> <span class="comment">#|表示保留换行符</span></span><br><span class="line"><span class="comment">#数组</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">5433</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">5634</span></span><br><span class="line"><span class="attr">ports1:</span> [<span class="number">6379</span>, <span class="number">6380</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/06/05/yaml%E5%AD%A6%E4%B9%A0/u=3348710092,4003996263&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG.jpeg&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="yaml" scheme="https://fsjz2020.github.io/tags/yaml/"/>
    
  </entry>
  
  <entry>
    <title>json学习</title>
    <link href="https://fsjz2020.github.io/2022/06/04/json%E5%AD%A6%E4%B9%A0/"/>
    <id>https://fsjz2020.github.io/2022/06/04/json%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-06-04T09:07:47.000Z</published>
    <updated>2022-06-06T07:26:17.650Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/06/04/json%E5%AD%A6%E4%B9%A0/u=2878167530,1086893345&fm=253&fmt=auto&app=138&f=JPEG.jpeg" alt="img" style="zoom:50%;"></p><p>JSON(JavaScript Object Notation,JS对象标记)是一种轻量级的数据交换格式，目前使用的特别广泛。</p><span id="more"></span><h1 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h1><ul><li>对象表示为键值对</li><li>数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p>值可以为字符串、数字、数组和json对象。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>:<span class="string">&quot;value&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;key2&quot;</span>:<span class="number">-1234.567</span>,</span><br><span class="line">    <span class="attr">&quot;Key3&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;FS\&quot;JZ&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;age&quot;</span>:<span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;key4&quot;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">    <span class="attr">&quot;key6&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;a&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>:<span class="number">18</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;b&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>:<span class="number">19</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;c&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>:<span class="number">20</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;d&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>:<span class="number">21</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;key7&quot;</span>:<span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h1><p>key6[0].name</p><h1 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\\</span><br><span class="line">\&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/06/04/json%E5%AD%A6%E4%B9%A0/u=2878167530,1086893345&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG.jpeg&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;&lt;/p&gt;
&lt;p&gt;JSON(JavaScript Object Notation,JS对象标记)是一种轻量级的数据交换格式，目前使用的特别广泛。&lt;/p&gt;</summary>
    
    
    
    
    <category term="json" scheme="https://fsjz2020.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>git学习</title>
    <link href="https://fsjz2020.github.io/2022/03/22/git%E5%AD%A6%E4%B9%A0/"/>
    <id>https://fsjz2020.github.io/2022/03/22/git%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-03-22T10:36:40.000Z</published>
    <updated>2022-03-23T13:10:12.735Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/03/22/git%E5%AD%A6%E4%B9%A0/u=1832660845,1003644526&fm=253&fmt=auto&app=120&f=JPEG.jpeg" alt="img" style="zoom:33%;"></p><span id="more"></span><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;YourName&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email@xample.com&quot;</span></span><br></pre></td></tr></table></figure><p><strong>创建库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h1 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add README.txt file.txt</span><br><span class="line">git commit -m <span class="string">&quot;Message&quot;</span></span><br></pre></td></tr></table></figure><p><strong>查看状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p><strong>比较差异</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff README.txt</span><br></pre></td></tr></table></figure><h1 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h1><p><strong>查看修改记录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline <span class="comment">#一行显示</span></span><br></pre></td></tr></table></figure><p><strong>回退版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>回退两个版本就用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^^</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">git reset --hard HEAD~100</span><br></pre></td></tr></table></figure><p><strong>返回现在的版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 1094a<span class="comment">#commit提交的前几位</span></span><br></pre></td></tr></table></figure><p><strong>git有一个指令用来记录输入过的指令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p><strong>撤销修改</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore -- README.txt</span><br></pre></td></tr></table></figure><p>没有提交到暂存区，则恢复到修改之前的状态，若已提交到暂存区，则恢复到最初提交到暂存区的版本</p><p><strong>撤销暂存区的修改</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD README.txt</span><br></pre></td></tr></table></figure><p><strong>删除文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm test.txt</span><br></pre></td></tr></table></figure><h1 id="远程库"><a href="#远程库" class="headerlink" title="远程库"></a>远程库</h1><p><strong>连接远程库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@server-name:path/repo-name.git</span><br></pre></td></tr></table></figure><p>origin是远程库名</p><p><strong>将本地库推送到远程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><strong>以后推送</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><strong>查看远程库信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p><strong>删除远程库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure><p><strong>远程克隆</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@server-name:path/repo-name.git</span><br></pre></td></tr></table></figure><p><strong>从远程抓取</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p><strong>创建分支并切换</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><p><strong>查看当前所有分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p><strong>切换分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p><strong>合并分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure><p>将指定分支合并到当前分支</p><p><strong>删除分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><p><strong>另一种切换分支的方式</strong></p><p>切换未创建的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch -c dev</span><br></pre></td></tr></table></figure><p>切换已有分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch master</span><br></pre></td></tr></table></figure><p><strong>冲突解决</strong></p><p>无法合并需要手动解决冲突再合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><p>可查看分支合并图</p><p><strong>禁用Fast forward</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff -m <span class="string">&quot;message&quot;</span> dev</span><br></pre></td></tr></table></figure><p>合并后的历史有分支</p><p><strong>bug分支</strong></p><p>使用<code>git stash</code>将工作现场储藏起来，使用<code>git stash list</code>查看工作现场，使用<code>git stash apply</code>恢复现场，使用<code>git stash drop</code>清除记录，或直接使用<code>git stash pop</code>恢复现场+清除记录。</p><p>可以多次<code>git stash</code>，恢复时只需要<code>git stash apply stash@&#123;0&#125;</code>形式恢复对应的版本</p><p>修复bug后将修改后的代码同步到分支上来可以用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick 4c805e2</span><br></pre></td></tr></table></figure><p><strong>删除未合并的分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D dev</span><br></pre></td></tr></table></figure><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><p><strong>添加标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0</span><br><span class="line">git tag v0.9 2782bfc</span><br><span class="line">git tag -a v0.1 -m <span class="string">&quot;version 0.1 released&quot;</span> 1049adb</span><br></pre></td></tr></table></figure><p><strong>显示信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show &lt;tagname&gt;</span><br></pre></td></tr></table></figure><p><strong>显示所有标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><p><strong>删除标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v0.1</span><br></pre></td></tr></table></figure><p><strong>将标签推送到远程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin v0.1</span><br></pre></td></tr></table></figure><p><strong>将所有标签推送到远程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><p><strong>删除远程标签</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v0.9</span><br><span class="line">git push origin :refs/tags/v0.9</span><br></pre></td></tr></table></figure><h1 id="定义git"><a href="#定义git" class="headerlink" title="定义git"></a>定义git</h1><p><strong>忽略特殊文件</strong></p><p>在Git的根工作区下存放一个<code>.gitignore</code>的文件，将需要忽略的文件名放进去</p><p><strong>强制添加文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -f &lt;filename&gt;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/github/gitignore">github<code>.gitignore模板</code></a></p><p><strong>添加快捷键</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.st status</span><br></pre></td></tr></table></figure><p>单个仓库下的配置文件放在<code>.git/config</code>下，全局<strong>git</strong>配置存放在用户名目录中</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/03/22/git%E5%AD%A6%E4%B9%A0/u=1832660845,1003644526&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG.jpeg&quot; alt=&quot;img&quot; style=&quot;zoom:33%;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="git" scheme="https://fsjz2020.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python正则学习</title>
    <link href="https://fsjz2020.github.io/2022/02/26/Python%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0/"/>
    <id>https://fsjz2020.github.io/2022/02/26/Python%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-02-26T13:39:26.000Z</published>
    <updated>2022-03-01T02:26:51.477Z</updated>
    
    <content type="html"><![CDATA[<p>.</p><span id="more"></span><p><strong>search</strong>:寻找string中的第一个pattern</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> re</span><br><span class="line">In [<span class="number">2</span>]: a = <span class="string">&quot;is&quot;</span></span><br><span class="line">In [<span class="number">3</span>]: b = <span class="string">&quot;This is a string for test&quot;</span></span><br><span class="line">In [<span class="number">4</span>]: re.search(a, b)</span><br><span class="line">Out[<span class="number">4</span>]: &lt;re.Match <span class="built_in">object</span>; span=(<span class="number">2</span>, <span class="number">4</span>), match=<span class="string">&#x27;is&#x27;</span>&gt;</span><br><span class="line">In [<span class="number">5</span>]: match = re.search(a, b)</span><br><span class="line">In [<span class="number">6</span>]: match.start()</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">2</span></span><br><span class="line">In [<span class="number">7</span>]: match.end()</span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>findall</strong>：找到所有的符合的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: re.findall(a, b)</span><br><span class="line">Out[<span class="number">8</span>]: [<span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;is&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>finditer</strong>：返回迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: re.finditer(a, b)</span><br><span class="line">Out[<span class="number">9</span>]: &lt;callable_iterator at <span class="number">0x1d2e0145310</span>&gt;</span><br><span class="line">In [<span class="number">10</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> re.finditer(a, b):</span><br><span class="line">    ...:     <span class="built_in">print</span>(i)</span><br><span class="line">&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">2</span>, <span class="number">4</span>), match=<span class="string">&#x27;is&#x27;</span>&gt;</span><br><span class="line">&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">5</span>, <span class="number">7</span>), match=<span class="string">&#x27;is&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>match</strong>：只能匹配开头符合的</p><p><strong>fullmatch</strong>：要求整个字符串都与模式匹配</p><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>标志</strong></th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">IGNORECASE</td><td style="text-align:center">使匹配不区分大小写</td></tr><tr><td style="text-align:center">MULTILINE</td><td style="text-align:center">使匹配可以匹配多行</td></tr><tr><td style="text-align:center">DOTALL</td><td style="text-align:center">使.可以匹配换行符</td></tr><tr><td style="text-align:center">ASCII</td><td style="text-align:center">匹配ASCII码而不是UNICODE</td></tr></tbody></table></div><p><strong>嵌入标志</strong></p><p>在表达式前用<strong>(?i)</strong>来嵌入</p><div class="table-container"><table><thead><tr><th style="text-align:center">标志</th><th style="text-align:center">缩写</th></tr></thead><tbody><tr><td style="text-align:center">ASCII</td><td style="text-align:center">a</td></tr><tr><td style="text-align:center">IGNORECASE</td><td style="text-align:center">i</td></tr><tr><td style="text-align:center">MUTILINE</td><td style="text-align:center">m</td></tr><tr><td style="text-align:center">DOTALL</td><td style="text-align:center">s</td></tr><tr><td style="text-align:center">VERBOSE</td><td style="text-align:center">x</td></tr></tbody></table></div><p><strong>组命名</strong></p><p><strong>(?P<name>)</name></strong></p><p><strong>组引用</strong></p><p><strong>(?P=name)</strong></p><p><strong>不同选择模式</strong></p><p><strong>?(id)yes_pattern|no_pattern</strong></p><p>id是组号或编号</p><p><strong>sub</strong>替换</p><p><strong>subn</strong>替换并返回替换次数</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://fsjz2020.github.io/tags/Python/"/>
    
    <category term="re" scheme="https://fsjz2020.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>numpy笔记</title>
    <link href="https://fsjz2020.github.io/2022/02/19/numpy%E7%AC%94%E8%AE%B0/"/>
    <id>https://fsjz2020.github.io/2022/02/19/numpy%E7%AC%94%E8%AE%B0/</id>
    <published>2022-02-19T08:35:27.000Z</published>
    <updated>2022-02-23T15:35:07.843Z</updated>
    
    <content type="html"><![CDATA[<p>.</p><span id="more"></span><h1 id="Numpy创建数组"><a href="#Numpy创建数组" class="headerlink" title="Numpy创建数组"></a>Numpy创建数组</h1><h2 id="从无到有"><a href="#从无到有" class="headerlink" title="从无到有"></a>从无到有</h2><p><strong>numpy.empty(shape,dtype=int,order=’C’)</strong></p><p>创建一个未初始化的数组</p><blockquote><p>shape:形状</p><p>dtype:数据类型</p><p>order:”C”行优先,”F”列优先</p></blockquote><p><strong>numpy.zeros(shape,dtype=int,order=’C’)</strong></p><p>创建全0数组</p><p><strong>numpy.ones(shape,dtype=int,order=’C’)</strong></p><p>创建全1数组</p><h2 id="从已有创建新的"><a href="#从已有创建新的" class="headerlink" title="从已有创建新的"></a>从已有创建新的</h2><p><strong>numpy.asarray(a,dtype=float,order=’C’)</strong></p><blockquote><p>a可以是列表</p></blockquote><p><strong>numpy.frombuffer(buffer, dtype = float, count = -1, offset = 0)</strong>从流读取</p><blockquote><p>count:默认-1读取所有</p><p>offset:读取位置，默认为0</p></blockquote><p><strong>numpy.fromiter(iterable,dtype,count=-1)</strong></p><p>从可迭代对象读取</p><h2 id="从数值范围创建新的"><a href="#从数值范围创建新的" class="headerlink" title="从数值范围创建新的"></a>从数值范围创建新的</h2><p><strong>numpy.arange(start,stop,step,dtype)</strong></p><blockquote><p>start:默认为0</p><p>stop:终止值(不包含)</p><p>step:步长，默认为1</p><p>dtype:数据类型</p></blockquote><p><strong>numpy.linspace(start,stop,num=50,endpoint=True,retstep=False,dtype=None)</strong></p><blockquote><p>endpoint:是否包含终止值，默认为True</p><p>retstep：是否包含步长</p></blockquote><p><strong>numpy.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None)</strong></p><blockquote><p>start：起始阶</p><p>stop：终止阶</p><p>base：底数</p></blockquote><h2 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.arange(<span class="number">32</span>).reshape(<span class="number">8</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span>]</span><br><span class="line"> [<span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]</span><br><span class="line"> [<span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span>]</span><br><span class="line"> [<span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>]])</span><br><span class="line">[[<span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [<span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span>]]</span><br></pre></td></tr></table></figure><h2 id="多个数组索引"><a href="#多个数组索引" class="headerlink" title="多个数组索引"></a>多个数组索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.arange(<span class="number">32</span>).reshape(<span class="number">8</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span>]</span><br><span class="line"> [<span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]</span><br><span class="line"> [<span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span>]</span><br><span class="line"> [<span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[np.ix_([<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>])])</span><br><span class="line">[[ <span class="number">4</span>  <span class="number">7</span>  <span class="number">5</span>  <span class="number">6</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">23</span> <span class="number">21</span> <span class="number">22</span>]</span><br><span class="line"> [<span class="number">28</span> <span class="number">31</span> <span class="number">29</span> <span class="number">30</span>]</span><br><span class="line"> [ <span class="number">8</span> <span class="number">11</span>  <span class="number">9</span> <span class="number">10</span>]]</span><br></pre></td></tr></table></figure><h1 id="广播-BroadCast"><a href="#广播-BroadCast" class="headerlink" title="广播(BroadCast)"></a>广播(BroadCast)</h1><p>当两个数组长度和维数相同，则算术运算是对应位的算术运算</p><p>若长度不相同，则将短的扩充到与长的长度相同再运算</p><blockquote><p>规则(来自<a href="https://www.runoob.com/numpy/numpy-broadcast.html">菜鸟教程</a>)：</p><ul><li>数组拥有相同形状。</li><li>当前维度的值相等。</li><li>当前维度的值有一个是 1。</li></ul></blockquote><h1 id="数组迭代"><a href="#数组迭代" class="headerlink" title="数组迭代"></a>数组迭代</h1><p><strong>numpy.nditer(a,order=’C’)</strong></p><blockquote><p>迭代顺序C风格行优先，F风格列优先</p></blockquote><h1 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h1><h2 id="修改数组形状"><a href="#修改数组形状" class="headerlink" title="修改数组形状"></a>修改数组形状</h2><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">reshape</td><td style="text-align:center">不改变数据条件下修改形状</td></tr><tr><td style="text-align:center">flat</td><td style="text-align:center">数组元素迭代器</td></tr><tr><td style="text-align:center">flatten</td><td style="text-align:center">返回一份数组拷贝，对拷贝做修改不影响原始数据</td></tr><tr><td style="text-align:center">ravel</td><td style="text-align:center">返回展开数组</td></tr></tbody></table></div><p><strong>numpy.reshape(arr,newshape,order=’C’)</strong></p><blockquote><p>arr：原数组</p><p>newshape：整数或整数数组</p><p>order：C按行，F按列，A原顺序，K元素在内存中的顺序</p></blockquote><p><strong>numpy.ndarray.flat</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> a.flat:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p><strong>numpy.ndarray.flatten(order=’C’)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a.flatten(order=<span class="string">&#x27;K&#x27;</span>))</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]</span><br></pre></td></tr></table></figure><p><strong>numpy.ravel(a,order=’C’)</strong></p><p>将数组展平</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=np.arange(<span class="number">1</span>,<span class="number">65</span>).reshape(<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b.ravel())</span><br><span class="line">[ <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span></span><br><span class="line"> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span> <span class="number">32</span> <span class="number">33</span> <span class="number">34</span> <span class="number">35</span> <span class="number">36</span> <span class="number">37</span> <span class="number">38</span> <span class="number">39</span> <span class="number">40</span> <span class="number">41</span> <span class="number">42</span> <span class="number">43</span> <span class="number">44</span> <span class="number">45</span> <span class="number">46</span> <span class="number">47</span> <span class="number">48</span></span><br><span class="line"> <span class="number">49</span> <span class="number">50</span> <span class="number">51</span> <span class="number">52</span> <span class="number">53</span> <span class="number">54</span> <span class="number">55</span> <span class="number">56</span> <span class="number">57</span> <span class="number">58</span> <span class="number">59</span> <span class="number">60</span> <span class="number">61</span> <span class="number">62</span> <span class="number">63</span> <span class="number">64</span>]</span><br></pre></td></tr></table></figure><h2 id="翻转数组"><a href="#翻转数组" class="headerlink" title="翻转数组"></a>翻转数组</h2><p><strong>numpy.trranspose(arr,axes)</strong></p><blockquote><p>arr:要操作的数组</p><p>axes:对应维度</p></blockquote><p><strong>numpy.ndarray.T</strong></p><p>与上相同</p><p><strong>numpy.rollaxis(arr,axis,start)</strong></p><blockquote><p>arr:数组</p><p>axis:要向后滚动的轴</p><p>start:默认为0</p></blockquote><p><strong>numpy.swapaxes(arr,axis1,axis2)</strong></p><blockquote><p>arr：输入的数组</p><p>axis1：第一个轴</p><p>axis2：第二个轴</p></blockquote><h2 id="修改维度"><a href="#修改维度" class="headerlink" title="修改维度"></a>修改维度</h2><p><strong>numpy.broadcast_to(array,shape,subok)</strong></p><p>将array广播到shape形状</p><p><strong>numpy.expand_dims(arr,axis)</strong></p><p>在指定位置插入新的轴</p><p><strong>numpy.squeeze(arr,axis)</strong></p><p>从arr中删除axis维坐标</p><h2 id="连接数组"><a href="#连接数组" class="headerlink" title="连接数组"></a>连接数组</h2><p><strong>numpy.concatenate((a1,a2,…),axis)</strong></p><p>沿现有轴连接形状相同的两个或多个数组</p><p><strong>numpy.stack(arrays,axis)</strong></p><p>沿新轴连接新序列</p><p><strong>numpy.hstack(arrays)</strong></p><p>水平堆叠</p><p><strong>numpy.vstack(arrays)</strong></p><p>垂直堆叠</p><h2 id="分割数组"><a href="#分割数组" class="headerlink" title="分割数组"></a>分割数组</h2><p><strong>numpy.split(ary,indices_or_sections,axis)</strong></p><blockquote><p>ary：数组</p><p>indices_or_sections：如果是整数，为分成多少部分，如果是数组，则是在哪里开始分</p><p>axis：沿哪个方向切分</p></blockquote><p><strong>numpy.hsplit(ary,nums)</strong></p><p>水平切分</p><p><strong>numpy.vsplit(ary,nums)</strong></p><p>垂直切分</p><h2 id="数组元素添加与删除"><a href="#数组元素添加与删除" class="headerlink" title="数组元素添加与删除"></a>数组元素添加与删除</h2><p><strong>numpy.resize(arr,shape)</strong></p><p>与reshape作用差不多</p><p><strong>numpy.append(arr,values,axis=None)</strong></p><p>当axis为None时，返回的是一维数组</p><p><strong>numpy.insert(arr,obj,values,axis)</strong></p><p>未提供axis数组会被展开</p><p><strong>numpy.delete(arr,obj,axis)</strong></p><p>未传递axis数组会被展开</p><p><strong>numpy.unique(arr,return_index,return_inverse,return_count)</strong></p><blockquote><p>arr：输入数组</p><p>return_index：返回新数组元素在旧列表中的位置</p><p>return_inverse：返回旧数组元素在新列表中的位置</p><p>return_count：返回每个元素的个数</p></blockquote><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><p><strong>bitwise_and</strong>对元素数组执行位运算</p><p><strong>bitwise_or</strong>对元素数组执行或运算</p><p><strong>invert</strong>按位取反</p><p><strong>left_shift</strong>向左移动二进制</p><p><strong>right_shift</strong>向右移动二进制</p><p><strong>binary_repr</strong>二进制表示</p><h1 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h1><p>字符串函数与python自带的string方法类似</p><h1 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h1><p>sin、cos、tan、arcsin、arccos、arctan、degrees、around、floor(小于或等于指定表达式的最大整数，向下取整)、ceil(向上取整)</p><h1 id="算术函数"><a href="#算术函数" class="headerlink" title="算术函数"></a>算术函数</h1><p>add、subtract、multiply、divide、reciprocal(倒数)、power(幂)、<strong>mod、remainder</strong>(取余)</p><h1 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h1><p><strong>amin、amax</strong>(计算指定轴的最小最大值)<strong>ptp</strong>(计算数组元素最大值与最小值的差值)</p><p><strong>percentile</strong>(百分位数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([[<span class="number">4</span>,<span class="number">8</span>,<span class="number">6</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.percentile(a,<span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(np.percentile(a,<span class="number">50</span>,axis=<span class="number">0</span>,keepdims=<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(np.percentile(a,<span class="number">50</span>,axis=<span class="number">1</span>,keepdims=<span class="literal">True</span>))</span><br><span class="line"><span class="number">5.0</span></span><br><span class="line">[[<span class="number">3.</span>  <span class="number">5.5</span> <span class="number">7.5</span>]]</span><br><span class="line">[[<span class="number">6.</span>]</span><br><span class="line"> [<span class="number">3.</span>]]</span><br></pre></td></tr></table></figure><p><strong>median</strong>(中位数)、<strong>mean</strong>(平均数)、<strong>average</strong>(加权平均数)、<strong>std</strong>(标准差)、<strong>var</strong>(方差)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="numpy" scheme="https://fsjz2020.github.io/tags/numpy/"/>
    
    <category term="python" scheme="https://fsjz2020.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>xml学习</title>
    <link href="https://fsjz2020.github.io/2022/02/18/xml%E5%AD%A6%E4%B9%A0/"/>
    <id>https://fsjz2020.github.io/2022/02/18/xml%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-02-18T12:40:21.000Z</published>
    <updated>2022-02-18T13:59:38.124Z</updated>
    
    <content type="html"><![CDATA[<p><strong>xml:可扩展标记语言，用来传输和存储数据</strong></p><span id="more"></span><p>xml必须有一个根节点，名称随意，头声明可有可无（建议有），标签配对，大小写敏感</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注释--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>转义字符</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">\&lt;</th><th style="text-align:center">&lt;</th><th>less than</th></tr></thead><tbody><tr><td style="text-align:center">\&gt;</td><td style="text-align:center">&gt;</td><td>greater than</td></tr><tr><td style="text-align:center">\&amp;</td><td style="text-align:center">&amp;</td><td>ampersand</td></tr><tr><td style="text-align:center">\&apos;</td><td style="text-align:center">‘</td><td>apostrophe</td></tr><tr><td style="text-align:center">\&quot;</td><td style="text-align:center">“</td><td>quotation mark</td></tr></tbody></table></div><p><strong>属性</strong></p><p>一个标签可以有多个属性，属性的值必须用引号括起来（单引号，双引号均可）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">human</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span>&gt;</span></span><br><span class="line">        man</span><br><span class="line">    <span class="tag">&lt;/<span class="name">human</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>CDATA</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span>&lt;![CDATA[&lt;&gt;&gt;&lt;&lt;&lt;&gt;&gt;&lt;&lt;&amp;&#x27;&#x27;&quot;&quot;&quot;&quot;&amp;]]&gt;<span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/02/18/xml%E5%AD%A6%E4%B9%A0/image-20220218215729099.png" alt="image-20220218215729099"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;xml:可扩展标记语言，用来传输和存储数据&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="xml" scheme="https://fsjz2020.github.io/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5学习</title>
    <link href="https://fsjz2020.github.io/2022/02/10/PyQt5%E5%AD%A6%E4%B9%A0/"/>
    <id>https://fsjz2020.github.io/2022/02/10/PyQt5%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-02-10T05:57:07.000Z</published>
    <updated>2022-02-16T12:49:38.723Z</updated>
    
    <content type="html"><![CDATA[<p>.</p><span id="more"></span><p>QApplication是整个应用，QWidget是不同窗口，他们在PyQt5.QtWidgets下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication,QWidget</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#创建应用</span></span><br><span class="line">    app=QApplication(sys.argv)</span><br><span class="line">    <span class="comment">#创建窗口</span></span><br><span class="line">    w=QWidget()</span><br><span class="line">    <span class="comment">#窗口尺寸</span></span><br><span class="line">    w.resize(<span class="number">300</span>,<span class="number">150</span>)</span><br><span class="line">    <span class="comment">#窗口位置</span></span><br><span class="line">    w.move(<span class="number">300</span>,<span class="number">300</span>)</span><br><span class="line">    <span class="comment">#窗口图标</span></span><br><span class="line">    w.setWindowTitle(<span class="string">&#x27;桌面应用&#x27;</span>)</span><br><span class="line">    <span class="comment">#显示</span></span><br><span class="line">    w.show()</span><br><span class="line">    <span class="comment">#正常退出</span></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p><strong>将ui文件转换为py文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyuic5 -o demo.py demo.ui</span><br></pre></td></tr></table></figure><p><strong>通过ui生成的py文件生成窗口</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> Ui_demo2</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication,QMainWindow</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app=QApplication(sys.argv)</span><br><span class="line">    mainWindow=QMainWindow()</span><br><span class="line">    ui=Ui_demo2.Ui_MainWindow()</span><br><span class="line">    ui.setupUi(mainWindow)</span><br><span class="line">    mainWindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p><strong>热键</strong></p><p>在每个标签后使用格式如<code>(&amp;A)</code>类的字符</p><p><strong>主窗口类型</strong></p><blockquote><p>QMainWindow:包含菜单栏、工具栏、状态栏和标题栏</p><p>QWidget：是对话窗口的基类。无菜单栏、工具栏、状态栏</p><p>QDialog：不确定具体用途</p></blockquote><p><strong>获取窗口宽度和高度以及位置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QHBoxLayout,QMainWindow,QApplication,QPushButton,QWidget</span><br><span class="line"><span class="keyword">from</span> matplotlib.widgets <span class="keyword">import</span> Widget</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onClick_button</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Onclick&quot;</span>)</span><br><span class="line">    <span class="comment">#从窗口开始算</span></span><br><span class="line">    <span class="built_in">print</span>(widget.x())</span><br><span class="line">    <span class="built_in">print</span>(widget.y())<span class="comment">#不包含标题栏的位置</span></span><br><span class="line">    <span class="built_in">print</span>(widget.width())</span><br><span class="line">    <span class="built_in">print</span>(widget.height())</span><br><span class="line">    <span class="comment">#从工作区开始算</span></span><br><span class="line">    <span class="built_in">print</span>(widget.geometry().x())</span><br><span class="line">    <span class="built_in">print</span>(widget.geometry().y())</span><br><span class="line">    <span class="built_in">print</span>(widget.geometry().width())</span><br><span class="line">    <span class="built_in">print</span>(widget.geometry().height())</span><br><span class="line"></span><br><span class="line">app=QApplication(sys.argv)</span><br><span class="line">widget=QWidget()</span><br><span class="line">btn=QPushButton(widget)</span><br><span class="line">btn.setText(<span class="string">&quot;按钮&quot;</span>)</span><br><span class="line">btn.clicked.connect(onClick_button)</span><br><span class="line">btn.move(<span class="number">24</span>,<span class="number">52</span>)</span><br><span class="line">widget.resize(<span class="number">300</span>,<span class="number">240</span>)<span class="comment">#设置工作区的尺寸</span></span><br><span class="line">widget.move(<span class="number">250</span>,<span class="number">200</span>)</span><br><span class="line">widget.show()</span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p><strong>LineEdit校验器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIntValidator,QDoubleValidator,QRegExpValidator</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QRegExp</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QLineEditValidator</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        formLayout=QFormLayout()</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;校验器&quot;</span>)</span><br><span class="line">        intLineEdit=QLineEdit()</span><br><span class="line">        doubleLineEdit=QLineEdit()</span><br><span class="line">        validatorLineEdit=QLineEdit()</span><br><span class="line">        formLayout.addRow(<span class="string">&#x27;整数类型&#x27;</span>,intLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">&#x27;浮点类型&#x27;</span>,doubleLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">&#x27;正则表达式&#x27;</span>,validatorLineEdit)</span><br><span class="line"></span><br><span class="line">        intLineEdit.setPlaceholderText(<span class="string">&quot;数字&quot;</span>)</span><br><span class="line">        doubleLineEdit.setPlaceholderText(<span class="string">&quot;浮点&quot;</span>)</span><br><span class="line">        validatorLineEdit.setPlaceholderText(<span class="string">&quot;字母数字&quot;</span>)</span><br><span class="line"></span><br><span class="line">        intvalidator=QIntValidator(self)</span><br><span class="line">        intvalidator.setRange(<span class="number">1</span>,<span class="number">99</span>)</span><br><span class="line"></span><br><span class="line">        doublevalidator=QDoubleValidator(self)</span><br><span class="line">        doublevalidator.setRange(-<span class="number">360</span>,<span class="number">360</span>)</span><br><span class="line">        doublevalidator.setNotation(QDoubleValidator.StandardNotation)</span><br><span class="line">        doublevalidator.setDecimals(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        reg=QRegExp(<span class="string">&#x27;[a-zA-Z0-9]+$&#x27;</span>)</span><br><span class="line">        validator=QRegExpValidator(self)</span><br><span class="line">        validator.setRegExp(reg)</span><br><span class="line"></span><br><span class="line">        intLineEdit.setValidator(intvalidator)</span><br><span class="line">        doubleLineEdit.setValidator(doublevalidator)</span><br><span class="line">        validatorLineEdit.setValidator(validator)</span><br><span class="line"></span><br><span class="line">        self.setLayout(formLayout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main=QLineEditValidator()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p><strong>使用掩码限制输入</strong></p><p><img src="/2022/02/10/PyQt5%E5%AD%A6%E4%B9%A0/image-20220212094924849-16446305676461.png" alt="image-20220212094924849"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QLineEditMask</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        formLayout=QFormLayout()</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;掩码限制输入&quot;</span>)</span><br><span class="line"></span><br><span class="line">        ipLineEdit=QLineEdit()</span><br><span class="line">        macLineEdit=QLineEdit()</span><br><span class="line">        dateLineEdit=QLineEdit()</span><br><span class="line">        licenceLineEdit=QLineEdit()</span><br><span class="line"></span><br><span class="line">        ipLineEdit.setInputMask(<span class="string">&#x27;000.000.000.000;_&#x27;</span>)</span><br><span class="line">        macLineEdit.setInputMask(<span class="string">&#x27;HH:HH:HH:HH:HH:HH;_&#x27;</span>)</span><br><span class="line">        dateLineEdit.setInputMask(<span class="string">&#x27;0000-00-00 00:00:00&#x27;</span>)</span><br><span class="line">        licenceLineEdit.setInputMask(<span class="string">&#x27;&gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        formLayout.addRow(<span class="string">&#x27;数字掩码&#x27;</span>,ipLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">&#x27;Mac掩码&#x27;</span>,macLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">&#x27;日期掩码&#x27;</span>,dateLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">&#x27;许可证掩码&#x27;</span>,licenceLineEdit)</span><br><span class="line"></span><br><span class="line">        self.setLayout(formLayout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app= QApplication(sys.argv)</span><br><span class="line">    main=QLineEditMask()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p><img src="/2022/02/10/PyQt5%E5%AD%A6%E4%B9%A0/image-20220212095938686.png" alt="image-20220212095938686"></p><p><strong>下拉选择控件(大字体)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComBoxDemo</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        layout=QVBoxLayout()</span><br><span class="line">        self.label=QLabel(<span class="string">&quot;请选择编程语言&quot;</span>)</span><br><span class="line">        self.label.setFont(QFont(<span class="string">&#x27;黑体&#x27;</span>, <span class="number">100</span>))</span><br><span class="line">        self.label.setAlignment(Qt.AlignCenter)</span><br><span class="line">        self.combox=QComboBox()</span><br><span class="line">        self.combox.setFont(QFont(<span class="string">&#x27;黑体&#x27;</span>,<span class="number">50</span>))</span><br><span class="line">        self.combox.addItem(<span class="string">&quot;C++&quot;</span>)</span><br><span class="line">        self.combox.addItem(<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">        self.combox.addItems([<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;C#&quot;</span>,<span class="string">&quot;JavaScript&quot;</span>])</span><br><span class="line">        self.combox.currentIndexChanged.connect(self.selectChange)</span><br><span class="line">        layout.addWidget(self.label)</span><br><span class="line">        layout.addWidget(self.combox)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectChange</span>(<span class="params">self,i</span>):</span></span><br><span class="line">        self.label.setText(self.combox.currentText())</span><br><span class="line">        self.label.adjustSize()</span><br><span class="line">        <span class="keyword">for</span> count <span class="keyword">in</span> <span class="built_in">range</span>(self.combox.count()):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;items&#x27;</span>+<span class="built_in">str</span>(count)+<span class="string">&#x27;=&#x27;</span>+self.combox.itemText(count))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;current index&#x27;</span>,i)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = ComBoxDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p><img src="/2022/02/10/PyQt5%E5%AD%A6%E4%B9%A0/image-20220212175729721.png" alt="image-20220212175729721"></p><p><strong>滑动条控件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SliderDemo</span>(<span class="params">QDialog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        </span><br><span class="line">        layout=QVBoxLayout()</span><br><span class="line">        self.label = QLabel(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">        self.label.setAlignment(Qt.AlignCenter)</span><br><span class="line">        self.slider=QSlider(Qt.Horizontal)</span><br><span class="line">        self.slider.setMinimum(<span class="number">12</span>)</span><br><span class="line">        self.slider.setMaximum(<span class="number">400</span>)</span><br><span class="line">        self.slider.setTickPosition(QSlider.TicksBelow)</span><br><span class="line">        self.slider.setTickInterval(<span class="number">6</span>)</span><br><span class="line">        layout.addWidget(self.label)</span><br><span class="line">        layout.addWidget(self.slider)</span><br><span class="line">        self.slider.valueChanged.connect(self.getvalue)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getvalue</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.label.setFont(QFont(<span class="string">&#x27;黑体&#x27;</span>, self.slider.value()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = SliderDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/02/10/PyQt5%E5%AD%A6%E4%B9%A0/image-20220212213448429.png" alt="image-20220212213448429"></p><p><strong>自定义信号槽</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> signal <span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTypeSignal</span>(<span class="params">QObject</span>):</span></span><br><span class="line">    signal=pyqtSignal(<span class="built_in">str</span>)</span><br><span class="line">    signal2=pyqtSignal([<span class="built_in">int</span>,<span class="built_in">str</span>],[<span class="built_in">str</span>])<span class="comment">#信号重载，输入参数可以是一个整型一个字符串，也可是一个zheng&#x27;x</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.signal.emit(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run1</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.signal2.emit(<span class="number">1</span>,<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySlot</span>(<span class="params">QObject</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,msg</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get1</span>(<span class="params">self,msg,msg2</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">        <span class="built_in">print</span>(msg2)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    signal=MyTypeSignal()</span><br><span class="line">    slot=MySlot()</span><br><span class="line">    signal.signal.connect(slot.get)</span><br><span class="line">    signal.signal2.connect(slot.get1)</span><br><span class="line">    signal.run()</span><br><span class="line">    signal.run1()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python &amp;&amp; PyQt" scheme="https://fsjz2020.github.io/tags/Python-PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Lua笔记</title>
    <link href="https://fsjz2020.github.io/2022/02/02/Lua%E7%AC%94%E8%AE%B0/"/>
    <id>https://fsjz2020.github.io/2022/02/02/Lua%E7%AC%94%E8%AE%B0/</id>
    <published>2022-02-02T14:24:17.000Z</published>
    <updated>2022-02-08T12:06:08.927Z</updated>
    
    <content type="html"><![CDATA[<p>.</p><span id="more"></span><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>使用-i可以让Lua在执行完指定的程序后进入交互模式</p><p>调用函数可以用dofile，如在交互模式下，使用dofile(“test.lua”)，可以将test.lua中的函数加载到当前环境中</p><p>注释用<code>--</code></p><p>多行注释：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[多行</span></span><br><span class="line"><span class="comment">长注释</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><p>常用方法(不执行语句)</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">print(10)</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure><p>当想要执行时</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---[[</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span>)</span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>变量未赋值默认为<code>nil</code>，Lua不区分赋值为nil的变量和未初始化变量</p><h2 id="类型和值"><a href="#类型和值" class="headerlink" title="类型和值"></a>类型和值</h2><p>Lua有8种基本类型</p><ol><li>nil（空）</li><li>boolean（布尔）</li><li>number（数值）</li><li>string（字符串）</li><li>userdata（用户数据）</li><li>function（函数）</li><li>thread（线程）</li><li>table（表）</li></ol><p>使用type()可以获取值对应的类型</p><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p>Lua语言将<strong>false</strong>和<strong>nil</strong>视作假，其他视为真</p><h3 id="逻辑操作"><a href="#逻辑操作" class="headerlink" title="逻辑操作"></a>逻辑操作</h3><p><strong>and</strong></p><p>如果第一个操作数为假，返回第一个操作数，否则返回第二个</p><p><strong>or</strong></p><p>如果第一个操作数不为假，返回第一个，否则返回第二个</p><p><strong>not</strong>永远返回Boolean类型的值</p><h2 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h2><p><strong>参数</strong></p><p><code>-e</code>直接在命令行输入代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua -e <span class="string">&quot;print(10)&quot;</span></span><br></pre></td></tr></table></figure><h1 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h1><p>Lua5.2及之前的版本数值均以双精度浮点格式表示</p><p>Lua5.3可以采用64位int或双精度浮点类型</p><p><code>type(3)</code>和<code>type(3.0)</code>都是number</p><p>可以用<code>math.type(3)</code>和<code>math.type(3.0)</code>区分整型与浮点型</p><p>整除法<strong><code>//</code></strong>恒向负无穷取整</p><h2 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h2><p><code>&lt;</code> <code>&gt;</code> <code>&lt;=</code> <code>&gt;=</code> <code>==</code> <code>~=</code></p><h2 id="数学库"><a href="#数学库" class="headerlink" title="数学库"></a>数学库</h2><p>包含三角函数，指数函数，取整函数，最大和最小函数，随机数，pi以及huge，所有三角函数均以弧度为单位</p><h3 id="math-random"><a href="#math-random" class="headerlink" title="math.random"></a>math.random</h3><p>不带参数返回<strong>[0,1)</strong>内的均匀分布，带1个参数m，返回<strong>[1,m]</strong>的伪随机整数，两个参数l和m返回<strong>[l,m]</strong>的伪随机整数。</p><h4 id="math-randomseed"><a href="#math-randomseed" class="headerlink" title="math.randomseed()"></a>math.randomseed()</h4><p>用于设置伪随机数发生器的种子</p><h3 id="取整"><a href="#取整" class="headerlink" title="取整"></a>取整</h3><p><strong>floor</strong>（向下取整）<strong>ceil</strong>（向上取整）<strong>modf</strong>（向零取整）</p><p>可以用浮点值与零进行按位或运算，将浮点值强制转换为整型值</p><p><img src="/2022/02/02/Lua%E7%AC%94%E8%AE%B0/image-20220203154955309.png" alt="image-20220203154955309"></p><p>或用<strong>math.tointeger()</strong>,当参数含有小数或超出2^53时返回nil</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>与python相同，字符串是不可变量，可以用#获取字符串的长度，可以用<code>..</code>拼接字符串，可以用单引号或双引号创建字符串，与python相同</p><p><strong>三种方式</strong></p><p><img src="/2022/02/02/Lua%E7%AC%94%E8%AE%B0/image-20220203172336366.png" alt="image-20220203172336366"></p><p><code>\ddd</code>或<code>\xhh</code>或<code>\u&#123;h...h&#125;</code></p><p>多行字符</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">page=<span class="string">[[</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"><span class="comment">--或</span></span><br><span class="line"><span class="comment">--两个中括号间等号数量相同</span></span><br><span class="line">page=<span class="string">[====[</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">]====]</span></span><br></pre></td></tr></table></figure><p>\z跳过所有空白字符</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><strong>tonumber()</strong>将字符串转换为数值</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tonumber</span>(<span class="string">&quot;100101&quot;</span>,<span class="number">2</span>)<span class="comment">--可以使用2到36指明任意进制</span></span><br></pre></td></tr></table></figure><p><strong>tostring()</strong>将数值转换为字符串</p><h2 id="字符库方法"><a href="#字符库方法" class="headerlink" title="字符库方法"></a>字符库方法</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>.<span class="built_in">rep</span>(s,n)</span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">len</span>(s)</span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">upper</span>(s)</span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">lower</span>(s)</span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">reverse</span>(s)</span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">sub</span>(s,i,j)<span class="comment">--索引字符串中从i到j的字符，包括第i个和第j个，下标从1开始，最后一个为-1，=</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">char</span>(<span class="number">97</span>)</span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">&quot;abc&quot;</span>)<span class="comment">--返回第一个字符的数值表示</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">&quot;abc&quot;</span>,i)<span class="comment">--返回第i个字符的数值表示</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">&quot;abc&quot;</span>,i,j)<span class="comment">--返回第i到j个字符的数值表示</span></span><br></pre></td></tr></table></figure><p><strong>格式化字符串</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%x&quot;</span>,a)<span class="comment">--格式与c语言printf类似，x代表十六进制整数</span></span><br></pre></td></tr></table></figure><p>设<strong>s</strong>是一个字符串，可以用s:sub(i,j)来代替string.sub(s,i,j)</p><p><strong>string.find(“hello world”,”wor”)</strong>寻找子串</p><p><strong>string.gsub(“hello world”,”l”,”.”)</strong>替换子串</p><p><strong>utf8.char()</strong>和<strong>utf8.codepoint()</strong>等价于<strong>string.char()</strong>和<strong>string.byte()</strong></p><p><strong>utf8.codepoint()</strong>中的位置采用的是字节索引，可以用<strong>utf8.offset()</strong>获取字符在字符串中的索引</p><p><strong>utf8.codes()</strong></p><h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=&#123;&#125;</span><br><span class="line">a[<span class="string">&quot;x&quot;</span>]=<span class="number">10</span></span><br><span class="line">a=<span class="literal">nil</span></span><br><span class="line">a.x==a[<span class="string">&quot;x&quot;</span>] <span class="comment">--True</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">days=&#123;<span class="string">&quot;Sunday&quot;</span>,<span class="string">&quot;Monday&quot;</span>,<span class="string">&quot;Tuesday&quot;</span>,<span class="string">&quot;Wednesday&quot;</span>,<span class="string">&quot;Thursday&quot;</span>,<span class="string">&quot;Friday&quot;</span>,<span class="string">&quot;Saturday&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(day[<span class="number">4</span>]) <span class="comment">--Wednesday</span></span><br><span class="line">a=&#123;x=<span class="number">10</span>,y=<span class="number">20</span>&#125;</span><br><span class="line"><span class="comment">--等价于</span></span><br><span class="line">a=&#123;&#125;;a.x=<span class="number">10</span>;a.y=<span class="number">20</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;x=<span class="number">0</span>,y=<span class="number">0</span>&#125;<span class="comment">--&#123;[&quot;x&quot;]=0,[&quot;y&quot;]=0&#125;</span></span><br></pre></td></tr></table></figure><p>可以使用#获取序列（索引为{1，n}形成的表，值为nil的键实际不在表中）的长度</p><p>可以用<strong>pairs()</strong>遍历表中的元素，不过出现的键值对随机</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(<span class="built_in">arg</span>) <span class="keyword">do</span></span><br><span class="line">&gt;&gt; <span class="built_in">print</span>(k,v)</span><br><span class="line">&gt;&gt; <span class="keyword">end</span></span><br><span class="line"><span class="number">0</span>       lua</span><br></pre></td></tr></table></figure><p>对于列表，可以用<strong>ipairs()</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">for</span> u,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(t) <span class="keyword">do</span></span><br><span class="line">&gt;&gt; <span class="built_in">print</span>(u,v)</span><br><span class="line">&gt;&gt; <span class="keyword">end</span></span><br><span class="line"><span class="number">1</span>       <span class="number">10</span></span><br><span class="line"><span class="number">2</span>       <span class="function"><span class="keyword">function</span>: 0000000065<span class="title">b9cff0</span></span></span><br><span class="line"><span class="function">3       12</span></span><br><span class="line"><span class="function">4       <span class="title">hi</span></span></span><br></pre></td></tr></table></figure><p>遍历一定是按照顺序进行的</p><h2 id="表标准库"><a href="#表标准库" class="headerlink" title="表标准库"></a>表标准库</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(t,<span class="number">1</span>,x)<span class="comment">--在列表第一个位置插入x</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(t,x)<span class="comment">--在列表最后插入x</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">remove</span>(t)<span class="comment">--删除列表最后一个元素</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">remove</span>(t,x)<span class="comment">--删除列表第x个元素</span></span><br><span class="line"><span class="built_in">table</span>.move(a,f,e,t)<span class="comment">--将a表中从f到e的元素移动到t位置上</span></span><br><span class="line"><span class="built_in">table</span>.move(a,f,e,t,b)<span class="comment">--将上述元素移动到b表中</span></span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>当函数参数只有一个且为字符串或表构造器时，括号可选</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span><span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line"><span class="built_in">type</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>当输入参数不够时，其他的参数被赋值为nil，当输入的参数过多时，多余的参数被丢弃</p><p>当一个函数作为表达式的最后一个参数时才会返回所有的返回值，否则只会返回第一个值，如</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">x,y,z=foo(),<span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(x,y,z)</span><br><span class="line">a       <span class="number">20</span>      <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>将函数调用用一个圆括号括起来可以强制只返回一个结果</p><p>用<code>...</code>表示可变长度参数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">local</span> s=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _,v <span class="keyword">in</span> <span class="built_in">ipairs</span>&#123;...&#125; <span class="keyword">do</span></span><br><span class="line">        s=s+v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(sum(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>))</span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure><p>此外，还可用<code>table.pack(...)</code>返回一个表，这个表中保存了参数n</p><p>还可用<code>select</code>，select返回selector后的所有参数,当selector为#号时，返回额外参数的总数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">select</span>(<span class="number">1</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>)) <span class="comment">--a b c</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">select</span>(<span class="number">2</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>)) <span class="comment">--b c</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">select</span>(<span class="string">&quot;#&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>)) <span class="comment">--3</span></span><br></pre></td></tr></table></figure><p>还有一个函数为<code>table.unpack()</code>与table.pack()相反，其参数时一个数组，返回数组中的所有元素</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">table</span>.<span class="built_in">unpack</span>(&#123;<span class="string">&quot;sun&quot;</span>,<span class="string">&quot;mon&quot;</span>,<span class="string">&quot;tue&quot;</span>,<span class="string">&quot;wed&quot;</span>&#125;,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">--mon tue</span></span><br></pre></td></tr></table></figure><h2 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h2><p>尾调用是指在一个函数的结尾递归调用一个函数，此后不进行任何操作，称为尾调用</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> g(x)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>好处是无论递归多少层，栈都不会溢出</p><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><p><code>io.write()</code>可以读取任意数量的字符串并将其写入到当前输入流，可以有多个参数，应避免使用<code>io.write(a..b..c)</code>,而是使用<code>io.write(a,b,c)</code></p><p><code>io.read()</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">“a”</td><td style="text-align:center">读取整个文件</td></tr><tr><td style="text-align:center">“l”</td><td style="text-align:center">读取下一行（丢弃换行符）</td></tr><tr><td style="text-align:center">“L”</td><td style="text-align:center">读取下一行（保留换行符）</td></tr><tr><td style="text-align:center">“n”</td><td style="text-align:center">读取一个数值</td></tr><tr><td style="text-align:center">num</td><td style="text-align:center">以字符串读取num个字符</td></tr></tbody></table></div><p><code>io.read(0)</code>是一个特例，用于测试是否到达了末尾，如果没有到达末尾，返回空字符串，若到达了末尾，返回nil</p><p><code>io.open()</code>打开文件，与C语言相同，r只读，w只写，a附加</p><p>可以用<code>io.input()</code>和<code>io.output()</code>设置输入流和输出流</p><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p>可以使用<code>io.open()</code>打开文件，有两个参数，一个参数是打开的文件的名称，另一个是模式，r,w,a,b,若打开错误返回nil和错误码</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> f=<span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(filename,<span class="string">&quot;r&quot;</span>))</span><br><span class="line"><span class="keyword">local</span> t=f:<span class="built_in">read</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">f:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p><code>io.popen(&quot;command&quot;,&quot;mode&quot;)</code>这个函数有两个参数，第一个为在命令行所执行的指令，第二个为模式，可以为r（读取）或w（写入）</p><h1 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h1><p>lua变量默认是全局变量，局部变量使用前必须用<strong><code>local</code></strong>声明，在交互模式下每行代码就是个代码段，所以要想连续输入多行代码，可以将其放入<code>do...end</code>中</p><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><p><strong><code>if...then...else...end</code></strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a&lt;<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    a=<span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> a&lt;b <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong><code>if...then...elseif...then...else...end</code></strong></p><p><strong><code>while</code></strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a[i] <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(a[i])</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong><code>repeat...until...</code></strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> line</span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    line=<span class="built_in">io</span>.<span class="built_in">read</span>()</span><br><span class="line"><span class="keyword">until</span> line~=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><p>循环内声明的变量作用域包括until后面</p><p><strong><code>for</code></strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var=exp1,exp2,exp3 <span class="keyword">do</span></span><br><span class="line">    something</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>初始exp1，结束exp2，步长exp3[可选]，默认步长为1，若不想设置上限可以使用常量<strong><code>math.huge</code></strong></p><p><strong><code>goto</code></strong></p><p>标签格式为：<strong><code>::label::</code></strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line"><span class="keyword">goto</span> test</span><br><span class="line">a=<span class="number">2</span></span><br><span class="line">::test::</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Lua" scheme="https://fsjz2020.github.io/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>python句法</title>
    <link href="https://fsjz2020.github.io/2022/01/28/python%E5%8F%A5%E6%B3%95/"/>
    <id>https://fsjz2020.github.io/2022/01/28/python%E5%8F%A5%E6%B3%95/</id>
    <published>2022-01-28T14:58:20.000Z</published>
    <updated>2022-01-30T15:25:10.072Z</updated>
    
    <content type="html"><![CDATA[<p><strong>python句法分析</strong><a href="https://docs.python.org/zh-cn/3.9/reference/index.html">来源：python官方reference</a></p><span id="more"></span><h1 id="行结构"><a href="#行结构" class="headerlink" title="行结构"></a>行结构</h1><h2 id="编码声明"><a href="#编码声明" class="headerlink" title="编码声明"></a>编码声明</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coding[=:]\s*([-\w.]+)</span><br></pre></td></tr></table></figure><h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A[对象]--&gt;B[编号]</span><br><span class="line">A[对象]--&gt;C[类型]</span><br><span class="line">A[对象]--&gt;D[值]</span><br></pre></td></tr></table></figure><p><img src="/2022/01/28/python%E5%8F%A5%E6%B3%95/image-20220129191159535.png" alt="image-20220129191159535"></p><p>可以用<strong>id()</strong>显示编号的地址</p><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>列表可用<code>list1[0:10:2]</code>选中位置为偶数的元素</p><h2 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">__doc__</td><td style="text-align:center">函数文档，没有为None</td></tr><tr><td style="text-align:center">__name__</td><td style="text-align:center">函数名称</td></tr><tr><td style="text-align:center">__module__</td><td style="text-align:center">函数所属模块的名称</td></tr><tr><td style="text-align:center">__globals__</td><td style="text-align:center">存放该函数的模块的全局命名空间</td></tr><tr><td style="text-align:center">__annotations__</td><td style="text-align:center">包含参数标注的字典</td></tr><tr><td style="text-align:center">__kwdefaults__</td><td style="text-align:center">只包含关键字参数默认值的字典</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;python句法分析&lt;/strong&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.9/reference/index.html&quot;&gt;来源：python官方reference&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://fsjz2020.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记</title>
    <link href="https://fsjz2020.github.io/2022/01/16/Python%E7%AC%94%E8%AE%B0/"/>
    <id>https://fsjz2020.github.io/2022/01/16/Python%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-16T07:27:41.000Z</published>
    <updated>2022-01-28T03:29:17.915Z</updated>
    
    <content type="html"><![CDATA[<p>.</p><span id="more"></span><h1 id="函数参数传递"><a href="#函数参数传递" class="headerlink" title="函数参数传递"></a>函数参数传递</h1><p>Python函数参数可以包含一个<code>*name</code>和一个<code>**name</code>，其中<code>*name</code>可以接收多余的位置参数，并写到一个<strong>元组</strong>里，<code>**name</code>可以接收一个字典，在写程序时<code>*name</code>必须写在<code>**name</code>前</p><h2 id="特殊参数"><a href="#特殊参数" class="headerlink" title="特殊参数"></a>特殊参数</h2><p><img src="/2022/01/16/Python%E7%AC%94%E8%AE%B0/image-20220116154226837.png" alt="image-20220116154226837"></p><p><strong>/</strong>前的参数为仅限位置参数，<strong>*</strong>后的参数为仅限关键字参数</p><h2 id="解包参数列表"><a href="#解包参数列表" class="headerlink" title="解包参数列表"></a>解包参数列表</h2><p><strong>*</strong>解包列表，<strong>**</strong>解包字典</p><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> argument_list:expresion</span><br></pre></td></tr></table></figure><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>list.<strong>append</strong>(x)</p><p>​    在列表的末尾添加一个元素</p><p>list.<strong>extend</strong>(iterable)</p><p>​    使用可迭代对象（如字符，列表）等扩展列表</p><p>list.<strong>insert</strong>(i,x)</p><p>​    在i位置处插入一个元素x</p><p>list.<strong>remove</strong>(x)</p><p>​    移除列表中第一个值为x的值</p><p>list.<strong>pop</strong>([i])</p><p>​    删除列表中给定位置的元素并返回它</p><p>list.<strong>clear</strong>()</p><p>​    删除列表中的所有元素</p><p>list.<strong>index</strong>(x[,start[,end]])</p><p>​    返回列表中第一个值为x的从零开始的索引，start和end将搜索限制为列表的特定的子序列，最终返回的值还是相对于整个序列开始计算的。</p><p>list.<strong>count</strong>(x)</p><p>​    返回元素x在列表中出现的次数</p><p>list.<strong>sort</strong>(*,key=None,reverse=False)</p><p>​    对列表中的元素进行排序</p><p>list.<strong>reverse</strong>()</p><p>​    反转列表中的元素</p><p>list.<strong>copy</strong>()</p><p>​    返回列表中的浅拷贝</p><blockquote><p><strong>zip</strong>()函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。</p><p>如list(zip([1,2,3],[4,5,6],[7,8,9]))返回[(1,4,7),(2,5,8),(3,6,9)]</p></blockquote><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>一个元组由几个被逗号隔开的值组成，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t=<span class="number">12345</span>,<span class="number">54321</span>,<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">u=t,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>如果想创建0个元素或1个元素的元组，可以通过以下代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">empty=()<span class="comment">#创建0个元素的元组</span></span><br><span class="line">singleton=<span class="string">&#x27;hello&#x27;</span>,<span class="comment">#创建1个元素的元组</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>不能通过圆括号包围一个元素来建立只有一个元素的元组</p><hr><blockquote><p>一些花里胡哨的操作</p><p>t=1,2,3</p><p>x,y,z=t</p></blockquote><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合是由不重复元素组成的无序的集，可以通过花括号或set()创建集合，要创建空集合只能通过set()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>test=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">in</span> test</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;z&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a-b</span><br><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a|b</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a&amp;b</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a^b</span><br><span class="line">&#123;<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>类似于列表推导式，集合也支持推导式形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;abracadabra&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典以关键字为索引，关键字必须为不可变对象，如数字、字符串或元组；字符串是<strong>键：值</strong>对的集合，键必须是唯一的，可以用del来删除一个键值对。</p><p>可以使用list(d)来列出d字典中所有键的列表（按插入次序排列）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel=&#123;<span class="string">&#x27;jack&#x27;</span>:<span class="number">4098</span>,<span class="string">&#x27;sape&#x27;</span>:<span class="number">4139</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(tel)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>dict()构造函数可以直接从键值对序列里创建字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>([(<span class="string">&#x27;sape&#x27;</span>, <span class="number">4139</span>), (<span class="string">&#x27;guido&#x27;</span>, <span class="number">4127</span>), (<span class="string">&#x27;jack&#x27;</span>, <span class="number">4098</span>)])</span><br><span class="line">&#123;<span class="string">&#x27;sape&#x27;</span>: <span class="number">4139</span>, <span class="string">&#x27;guido&#x27;</span>: <span class="number">4127</span>, <span class="string">&#x27;jack&#x27;</span>: <span class="number">4098</span>&#125;</span><br></pre></td></tr></table></figure><p>也可以这样使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(sape=<span class="number">4139</span>, guido=<span class="number">4127</span>, jack=<span class="number">4098</span>)</span><br><span class="line">&#123;<span class="string">&#x27;sape&#x27;</span>: <span class="number">4139</span>, <span class="string">&#x27;guido&#x27;</span>: <span class="number">4127</span>, <span class="string">&#x27;jack&#x27;</span>: <span class="number">4098</span>&#125;</span><br></pre></td></tr></table></figure><p>可以用items()方法将关键字和值一块取出</p><p>逆向循环一个序列，可以使用<strong>reversed()</strong>函数</p><p>去除重复元素可用set()，返回一个<strong>集合</strong>，再用sorted()输出排好序的<strong>列表</strong></p><h2 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h2><p><strong>in</strong>和<strong>not in</strong>可以校验一个值是否在（或不在）一个序列里，<strong>is</strong>和<strong>is not</strong>可以比较是不是同一个操作对象</p><p>比较操作可以传递，如<code>a&lt;b==c</code>会比较a是否小于b并且b是否等于c</p><p><code>and</code>和<code>or</code>是短路操作符，一旦符合要求，不会继续执行后边的判断，当用作普通值而非布尔值时，<br>短路操作符的返回值通常是最后一个变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string1, string2, string3 = <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Trondheim&#x27;</span>, <span class="string">&#x27;Hammer Dance&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>non_null = string1 <span class="keyword">or</span> string2 <span class="keyword">or</span> string3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>non_null</span><br><span class="line"><span class="string">&#x27;Trondheim&#x27;</span></span><br></pre></td></tr></table></figure><p>python在表达式中赋值必须用<code>:=</code></p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>见代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) &lt; (<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &lt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="string">&#x27;ABC&#x27;</span> &lt; <span class="string">&#x27;C&#x27;</span> &lt; <span class="string">&#x27;Pascal&#x27;</span> &lt; <span class="string">&#x27;Python&#x27;</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) &lt; (<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>) &lt; (<span class="number">1</span>, <span class="number">2</span>, -<span class="number">1</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) == (<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>)) &lt; (<span class="number">1</span>, <span class="number">2</span>, (<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;a&#x27;</span>), <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>模块名存放在<code>__name__</code>里</p><p><strong>几种调入方式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module_name1</span><br><span class="line"><span class="keyword">from</span> module_name2 <span class="keyword">import</span> name1,name2</span><br><span class="line"><span class="keyword">from</span> module_name3 <span class="keyword">import</span> *           <span class="comment">#会调入所有非下划线开头的名称</span></span><br><span class="line"><span class="keyword">import</span> module_name4 <span class="keyword">as</span> mdn4</span><br></pre></td></tr></table></figure><p>每个模块在每个解释器会话中只被导入一次,如果你更改了你的模块，则必须重新启动解释器，或者，如果它只是一个要交互式地测试的模块，请使用 <code>importlib.reload()</code>，例如 <code>import importlib; importlib.reload(modulename)</code>。</p><p>执行模块的话<code>__name__</code>为<code>__main__</code></p><h2 id="标准模块"><a href="#标准模块" class="headerlink" title="标准模块"></a>标准模块</h2><p> sys.ps1和sys.ps2主要用作主要和辅助提示的字符串</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.ps1</span><br><span class="line"><span class="string">&#x27;&gt;&gt;&gt; &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.ps2</span><br><span class="line"><span class="string">&#x27;... &#x27;</span></span><br></pre></td></tr></table></figure><p>sys.path 变量是一个字符串列表，用于确定解释器的模块搜索路径。</p><h2 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir()函数"></a>dir()函数</h2><p>函数 dir() 用于查找模块定义的名称。它返回一个排序过的字符串列表</p><p>如果没有参数，dir() 会列出当前定义的名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>()</span><br><span class="line">[<span class="string">&#x27;__annotations__&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>dir() 不会列出内置函数和变量的名称。它们的定义是在标准模块 builtins 中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> builtins</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(builtins)</span><br><span class="line">[<span class="string">&#x27;ArithmeticError&#x27;</span>, <span class="string">&#x27;AssertionError&#x27;</span>, <span class="string">&#x27;AttributeError&#x27;</span>, <span class="string">&#x27;BaseException&#x27;</span>, <span class="string">&#x27;BlockingIOError&#x27;</span>, <span class="string">&#x27;BrokenPipeError&#x27;</span>, <span class="string">&#x27;BufferError&#x27;</span>, <span class="string">&#x27;BytesWarning&#x27;</span>, <span class="string">&#x27;ChildProcessError&#x27;</span>, <span class="string">&#x27;ConnectionAbortedError&#x27;</span>, <span class="string">&#x27;ConnectionError&#x27;</span>, <span class="string">&#x27;ConnectionRefusedError&#x27;</span>, <span class="string">&#x27;ConnectionResetError&#x27;</span>, <span class="string">&#x27;DeprecationWarning&#x27;</span>, <span class="string">&#x27;EOFError&#x27;</span>, <span class="string">&#x27;Ellipsis&#x27;</span>, <span class="string">&#x27;EnvironmentError&#x27;</span>, <span class="string">&#x27;Exception&#x27;</span>, <span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;FileExistsError&#x27;</span>, <span class="string">&#x27;FileNotFoundError&#x27;</span>, <span class="string">&#x27;FloatingPointError&#x27;</span>, <span class="string">&#x27;FutureWarning&#x27;</span>, <span class="string">&#x27;GeneratorExit&#x27;</span>, <span class="string">&#x27;IOError&#x27;</span>, <span class="string">&#x27;ImportError&#x27;</span>, <span class="string">&#x27;ImportWarning&#x27;</span>, <span class="string">&#x27;IndentationError&#x27;</span>, <span class="string">&#x27;IndexError&#x27;</span>, <span class="string">&#x27;InterruptedError&#x27;</span>, <span class="string">&#x27;IsADirectoryError&#x27;</span>, <span class="string">&#x27;KeyError&#x27;</span>, <span class="string">&#x27;KeyboardInterrupt&#x27;</span>, <span class="string">&#x27;LookupError&#x27;</span>, <span class="string">&#x27;MemoryError&#x27;</span>, <span class="string">&#x27;ModuleNotFoundError&#x27;</span>, <span class="string">&#x27;NameError&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;NotADirectoryError&#x27;</span>, <span class="string">&#x27;NotImplemented&#x27;</span>, <span class="string">&#x27;NotImplementedError&#x27;</span>, <span class="string">&#x27;OSError&#x27;</span>, <span class="string">&#x27;OverflowError&#x27;</span>, <span class="string">&#x27;PendingDeprecationWarning&#x27;</span>, <span class="string">&#x27;PermissionError&#x27;</span>, <span class="string">&#x27;ProcessLookupError&#x27;</span>, <span class="string">&#x27;RecursionError&#x27;</span>, <span class="string">&#x27;ReferenceError&#x27;</span>, <span class="string">&#x27;ResourceWarning&#x27;</span>, <span class="string">&#x27;RuntimeError&#x27;</span>, <span class="string">&#x27;RuntimeWarning&#x27;</span>, <span class="string">&#x27;StopAsyncIteration&#x27;</span>, <span class="string">&#x27;StopIteration&#x27;</span>, <span class="string">&#x27;SyntaxError&#x27;</span>, <span class="string">&#x27;SyntaxWarning&#x27;</span>, <span class="string">&#x27;SystemError&#x27;</span>, <span class="string">&#x27;SystemExit&#x27;</span>, <span class="string">&#x27;TabError&#x27;</span>, <span class="string">&#x27;TimeoutError&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;TypeError&#x27;</span>, <span class="string">&#x27;UnboundLocalError&#x27;</span>, <span class="string">&#x27;UnicodeDecodeError&#x27;</span>, <span class="string">&#x27;UnicodeEncodeError&#x27;</span>, <span class="string">&#x27;UnicodeError&#x27;</span>, <span class="string">&#x27;UnicodeTranslateError&#x27;</span>, <span class="string">&#x27;UnicodeWarning&#x27;</span>, <span class="string">&#x27;UserWarning&#x27;</span>, <span class="string">&#x27;ValueError&#x27;</span>, <span class="string">&#x27;Warning&#x27;</span>, <span class="string">&#x27;WindowsError&#x27;</span>, <span class="string">&#x27;ZeroDivisionError&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;__build_class__&#x27;</span>, <span class="string">&#x27;__debug__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;all&#x27;</span>, <span class="string">&#x27;any&#x27;</span>, <span class="string">&#x27;ascii&#x27;</span>, <span class="string">&#x27;bin&#x27;</span>, <span class="string">&#x27;bool&#x27;</span>, <span class="string">&#x27;breakpoint&#x27;</span>, <span class="string">&#x27;bytearray&#x27;</span>, <span class="string">&#x27;bytes&#x27;</span>, <span class="string">&#x27;callable&#x27;</span>, <span class="string">&#x27;chr&#x27;</span>, <span class="string">&#x27;classmethod&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;complex&#x27;</span>, <span class="string">&#x27;copyright&#x27;</span>, <span class="string">&#x27;credits&#x27;</span>, <span class="string">&#x27;delattr&#x27;</span>, <span class="string">&#x27;dict&#x27;</span>, <span class="string">&#x27;dir&#x27;</span>, <span class="string">&#x27;divmod&#x27;</span>, <span class="string">&#x27;enumerate&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>, <span class="string">&#x27;filter&#x27;</span>, <span class="string">&#x27;float&#x27;</span>, <span class="string">&#x27;format&#x27;</span>, <span class="string">&#x27;frozenset&#x27;</span>, <span class="string">&#x27;getattr&#x27;</span>, <span class="string">&#x27;globals&#x27;</span>, <span class="string">&#x27;hasattr&#x27;</span>, <span class="string">&#x27;hash&#x27;</span>, <span class="string">&#x27;help&#x27;</span>, <span class="string">&#x27;hex&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;isinstance&#x27;</span>, <span class="string">&#x27;issubclass&#x27;</span>, <span class="string">&#x27;iter&#x27;</span>, <span class="string">&#x27;len&#x27;</span>, <span class="string">&#x27;license&#x27;</span>, <span class="string">&#x27;list&#x27;</span>, <span class="string">&#x27;locals&#x27;</span>, <span class="string">&#x27;map&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;memoryview&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;next&#x27;</span>, <span class="string">&#x27;object&#x27;</span>, <span class="string">&#x27;oct&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;ord&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;print&#x27;</span>, <span class="string">&#x27;property&#x27;</span>, <span class="string">&#x27;quit&#x27;</span>, <span class="string">&#x27;range&#x27;</span>, <span class="string">&#x27;repr&#x27;</span>, <span class="string">&#x27;reversed&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;setattr&#x27;</span>, <span class="string">&#x27;slice&#x27;</span>, <span class="string">&#x27;sorted&#x27;</span>, <span class="string">&#x27;staticmethod&#x27;</span>, <span class="string">&#x27;str&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>, <span class="string">&#x27;super&#x27;</span>, <span class="string">&#x27;tuple&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;vars&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>包是一种通过用”带点号的模块名“构造 Python 模块命名空间的方法，使用加点的模块名可以使多模块软件包的作者不必担心彼此的模块名称一样。</p><p>一个包中必须含有<code>__init__.py</code>才能称为包</p><h3 id="从包中导入"><a href="#从包中导入" class="headerlink" title="从包中导入*"></a>从包中导入*</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> package.submodule <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>如果submodule中的<code>__init__.py</code>中定义了名为<code>__all__</code>的列表，则根据此列表中的元素导入，若没有定义这个变量，则导入子模块中定义的所有变量</p><h3 id="子包参考"><a href="#子包参考" class="headerlink" title="子包参考"></a>子包参考</h3><p>当包构成子包时，可以使用绝对导入来引用兄弟包的子模块，也可以使用相对导入，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> echo</span><br><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> formats</span><br><span class="line"><span class="keyword">from</span> ..filters <span class="keyword">import</span> equalizer</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>相对导入是基于当前模块的名称进行导入的，python的主模块名称总为<code>__main__</code>,故主模块必须始终使用绝对导入。</p><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><p>在字符串的开头加上<strong>f</strong>或<strong>F</strong>,在此字符串中可以使用<strong>{}</strong>包裹的变量，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>year=<span class="string">&#x27;2022&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>month=<span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>day=<span class="string">&#x27;19&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">f&#x27;Today is <span class="subst">&#123;year&#125;</span>/<span class="subst">&#123;month&#125;</span>/<span class="subst">&#123;day&#125;</span>&#x27;</span>)</span><br><span class="line">Today <span class="keyword">is</span> <span class="number">2022</span>/<span class="number">1</span>/<span class="number">19</span></span><br></pre></td></tr></table></figure><p>字符串类型有format()方法,花括号内内容为<code>&#123;字段名!转换字段:格式说明符&#125;</code></p><p>格式说明符内内容为<code>[[填充]对齐方式][正负号][#][0][宽度][分组选项][.精度][类型码]</code>具体使用方法可参考<a href="https://blog.csdn.net/jpch89/article/details/84099277">https://blog.csdn.net/jpch89/article/details/84099277</a></p><h3 id="str和repr"><a href="#str和repr" class="headerlink" title="str和repr"></a>str和repr</h3><p>str可以将其它类型的数据转化为人可读的格式，repr则将字符转换为解释器可读的格式。</p><h2 id="手动格式化字符串"><a href="#手动格式化字符串" class="headerlink" title="手动格式化字符串"></a>手动格式化字符串</h2><p><strong>ljust(n)</strong>和<strong>rjust(n)</strong>左对齐和右对齐并补空格至n位，<strong>center(n)</strong>居中对齐</p><p><strong>str.zfill()</strong> ，它会在数字字符串的左边填充零。能识别正负号:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;12&#x27;</span>.zfill(<span class="number">5</span>)</span><br><span class="line"><span class="string">&#x27;00012&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;-3.14&#x27;</span>.zfill(<span class="number">7</span>)</span><br><span class="line"><span class="string">&#x27;-003.14&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;3.14159265359&#x27;</span>.zfill(<span class="number">5</span>)</span><br><span class="line"><span class="string">&#x27;3.14159265359&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="旧的字符串格式方法"><a href="#旧的字符串格式方法" class="headerlink" title="旧的字符串格式方法"></a>旧的字符串格式方法</h2><p>% 运算符（求余）也可用于字符串格式化。给定 ‘string’ % values，则 string 中的 % 实例会以零<br>个或多个 values 元素替换。此操作通常被称为字符串插值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;This is a test number %5.3f %3.5f&#x27;</span> % (<span class="number">54</span>,<span class="number">45</span>))</span><br><span class="line">This <span class="keyword">is</span> a test number <span class="number">54.000</span> <span class="number">45.00000</span></span><br></pre></td></tr></table></figure><h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">w</td><td style="text-align:center">只能写入</td></tr><tr><td style="text-align:center">r</td><td style="text-align:center">只能读取</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">打开文件追加内容</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:center">读写</td></tr></tbody></table></div><p>默认为’r’</p><h3 id="读文件的方法"><a href="#读文件的方法" class="headerlink" title="读文件的方法"></a>读文件的方法</h3><p><strong>f.read(size)</strong>若以文本方式打开，返回size个字符，若以二进制方式打开，返回size个字节，若到达文件末尾返回空字符</p><p><strong>f.readline()</strong>从文件中读取一行，换行符（\n）留在字符串的末尾，如果 <strong>f.readline()</strong> 返回一个空的字符串，则表示已经到达了文件末尾</p><p>要从文件中读取行，可以循环遍历文件对象，这是内存高效，快速的，并简化代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">...    <span class="built_in">print</span>(line, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">...</span><br><span class="line">This <span class="keyword">is</span> the first line of the file.</span><br><span class="line">Second line of the file</span><br></pre></td></tr></table></figure><p>如果想以列表方式读取文件所有行可用<strong>list(f)</strong>或<strong>f.readlines()</strong></p><p><strong>f.tell()</strong>返回一个整数，这个数字为文件对象在文件中的位置</p><p><strong>f.seek(offset,whence)</strong>改变文件对象的位置，offset提供偏移量，whence提供参考点，0表示开头，1表示使用当前文件位置，2表示使用文件末尾，默认为0</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>首先，执行try子句，若无异常，跳过except，若异常和except后的内容一样，则执行except后的子句</p><p>若except后不跟异常类型，则可以处理所有异常</p><p>try后可跟else子句，使用时必须放在except后面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">f = <span class="built_in">open</span>(arg, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> OSError:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;cannot open&#x27;</span>, arg)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(arg, <span class="string">&#x27;has&#x27;</span>, <span class="built_in">len</span>(f.readlines()), <span class="string">&#x27;lines&#x27;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>try不出错则执行else中的内容</p><h2 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> E:</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">&#x27;Bad&#x27;</span>)</span><br></pre></td></tr></table></figure><p>报错信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: Bad</span><br></pre></td></tr></table></figure><p>可以使用from使报错信息更明确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> E:</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">&#x27;Bad&#x27;</span>) <span class="keyword">from</span> E</span><br></pre></td></tr></table></figure><p>报错信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line">The above exception was the direct cause of the following exception:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: Bad</span><br></pre></td></tr></table></figure><p>可以使用<code>from None</code>使只报Exception里的错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> E:</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">&#x27;Bad&#x27;</span>) <span class="keyword">from</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>报错信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: Bad</span><br></pre></td></tr></table></figure><h2 id="用户自定义异常"><a href="#用户自定义异常" class="headerlink" title="用户自定义异常"></a>用户自定义异常</h2><p>异常通常应该直接或间接由Exception类派生</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error1</span>(<span class="params">Error</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,expression,message</span>):</span></span><br><span class="line">        self.expression=expression</span><br><span class="line">        self.message=message</span><br></pre></td></tr></table></figure><h2 id="finally语句"><a href="#finally语句" class="headerlink" title="finally语句"></a>finally语句</h2><p>无论try有没有异常，都会执行finally后的语句</p><p>若try无异常，则try的语句执行完后执行finally中的语句</p><p>若try出现异常，则在报错前先执行finally中的语句然后报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">try--&gt;语句1--未报错--&gt;else--&gt;语句4--&gt;finally</span><br><span class="line">finally--&gt;语句2</span><br><span class="line">语句1--报错--&gt;except--未报错--&gt;语句3--&gt;finally</span><br><span class="line">except--报错--&gt;finally</span><br><span class="line">语句2--&gt;退出</span><br></pre></td></tr></table></figure><p><img src="/2022/01/16/Python%E7%AC%94%E8%AE%B0/image-20220120115629582.png" alt="image-20220120115629582"></p><h2 id="预清理操作"><a href="#预清理操作" class="headerlink" title="预清理操作"></a>预清理操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><p>执行完操作以后，f文件对象会被自动关闭</p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="global-and-nonlocal"><a href="#global-and-nonlocal" class="headerlink" title="global and nonlocal"></a>global and nonlocal</h2><p>关于<strong>global</strong>和<strong>nonlocal</strong>的使用方法，可以参考这篇博客<a href="https://blog.csdn.net/xCyansun/article/details/79672634">https://blog.csdn.net/xCyansun/article/details/79672634</a></p><h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>类对象支持<strong>属性引用</strong>和<strong>实例化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A very simple class&quot;&quot;&quot;</span></span><br><span class="line">    i=<span class="number">12345</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure><p>类的变量不能为mutable类型</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Python有两个内置函数可被用于继承机制</p><ul><li><p><strong>isinstance()</strong>来检查一个实例的类型</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>():</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...     <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=MyClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(x,MyClass)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>issubclass()</strong>来检查一个类是否是另一个类的子类</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">issubclass</span>(<span class="built_in">bool</span>,<span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h2><p>带有一个下划线的名称应当看作是API的非共有部分（如_spam)</p><p><strong>名称改写：</strong>任何形式为<strong>__spam</strong>（至少有两个前缀下划线，至多一个后缀下划线）的文本将被替换为<strong>_classname__spam</strong></p><h2 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h2><p>迭代器，对一个对象使用<strong>iter()</strong>,返回迭代器，迭代器有<strong>next()</strong>方法，可以返回迭代器的下一个值，如果到达末尾，则返回<strong>StopIteration</strong></p><p>生成器表达式语法类似于列表推导式，但外层是圆括号而非方括号</p><h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><h2 id="操作系统接口"><a href="#操作系统接口" class="headerlink" title="操作系统接口"></a>操作系统接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getcwd()</span><br><span class="line">os.chdir(<span class="string">&#x27;/test&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;cls&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="文件通配符"><a href="#文件通配符" class="headerlink" title="文件通配符"></a>文件通配符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">glob.glob(<span class="string">&#x27;*.py&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.argv)</span><br></pre></td></tr></table></figure><h2 id="错误输出重定向和程序终止"><a href="#错误输出重定向和程序终止" class="headerlink" title="错误输出重定向和程序终止"></a>错误输出重定向和程序终止</h2><p>sys模块具有<strong>stdin</strong>、<strong>stdout</strong>、<strong>stderr</strong>属性，终止脚本的最直接的方法是使用<code>sys.exit()</code></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><code>re</code>模块</p><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><p><code>math</code>模块，<code>random</code>模块，<code>statistics</code>模块</p><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><p><code>datetime</code>模块</p><h2 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h2><p><code>zlib, gzip, bz2, lzma, zipfile 和 tarfile</code>模块</p><h1 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h1><p>创建虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m venv test<span class="comment">#test为文件夹名称</span></span><br></pre></td></tr></table></figure><p>激活</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\test\Scripts\activate.bat</span><br></pre></td></tr></table></figure><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><p>命令</p><blockquote><p>install   安装<br>download  下载<br>uninstall  卸载<br>freeze    将安装的包列表导出成想要的格式<br>list      显示安装的包列表<br>show      显示包的信息<br>check     检查包依赖<br>config<br>search    在Pypi上寻找包<br>cache<br>index<br>wheel<br>hash<br>completion<br>debug<br>help      帮助</p></blockquote><p><strong>install</strong></p><blockquote><p>pip install numpy</p><p>pip install numpy==1.20.1</p><p>pip install —upgrade requests</p></blockquote><p><strong>show</strong></p><blockquote><p>$pip show numpy<br>Name: numpy<br>Version: 1.21.5<br>Summary: NumPy is the fundamental package for array computing with Python.<br>Home-page: <a href="https://www.numpy.org">https://www.numpy.org</a><br>Author: Travis E. Oliphant et al.<br>Author-email:<br>License: BSD<br>Location: d:\pyth39\lib\site-packages<br>Requires:<br>Required-by: h5py, Keras-Preprocessing, librosa, matplotlib, numba, opencv-python, opt-einsum, pandas, resampy, scikit-learn, scipy, seaborn, tensorboard, tensorflow, torchvision, umap-learn, visdom, wordcloud</p></blockquote><p><strong>list</strong></p><blockquote><p>$pip list<br>Package    Version<br>-————-         ———-<br>pip               21.3.1<br>setuptools  56.0.0</p></blockquote><p><strong>freeze</strong></p><blockquote><p>pip freeze &gt; requirements.txt</p><h1 id="然后可以使用"><a href="#然后可以使用" class="headerlink" title="然后可以使用"></a>然后可以使用</h1><p>pip install -r requirements.txt</p></blockquote><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="交互式启动文件"><a href="#交互式启动文件" class="headerlink" title="交互式启动文件"></a>交互式启动文件</h2><p>在Windows的环境变量中添加名为PYTHONSTARTUP的项，将值指向一个py文件，这样，当进行交互式操作时，会首先执行这个所指向的文件</p><h2 id="定制模块"><a href="#定制模块" class="headerlink" title="定制模块"></a>定制模块</h2><p>首先使用site模块获得用户自定义site-package的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> site</span><br><span class="line">site.getusersitepackages()</span><br></pre></td></tr></table></figure><p>然后在得到的文件夹建立一个<code>usercustomize.py</code>的文件，这样每次启动python都会首先执行这个文件，与<code>PYTHONSTARTUP</code>不同的是，<code>usercustomize.py</code>文件的命名空间与交互式窗口不同</p><p><code>sitecustomize.py</code>与<code>usercustomize.py</code>作用相同，不过它比<code>usercustomize.py</code>先调用。</p><p>此外，可用<code>python -s</code>禁用自动导入</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://fsjz2020.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Blender快捷键记录</title>
    <link href="https://fsjz2020.github.io/2022/01/12/Blender%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/"/>
    <id>https://fsjz2020.github.io/2022/01/12/Blender%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/</id>
    <published>2022-01-12T06:48:05.000Z</published>
    <updated>2022-01-15T05:00:01.403Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/01/12/Blender%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/u=2994461402,3237906530&amp;fm=26&amp;fmt=auto.jpeg" alt="img"></p><span id="more"></span><div class="table-container"><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">进入摄像机视图</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">透视/正交切换</td></tr><tr><td style="text-align:center">7/Ctrl+7</td><td style="text-align:center">顶视图/底视图</td></tr><tr><td style="text-align:center">1/Ctrl+1</td><td style="text-align:center">前视图/后视图</td></tr><tr><td style="text-align:center">3/Ctrl+3</td><td style="text-align:center">右视图/左视图</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">视图翻转</td></tr><tr><td style="text-align:center">Ctrl+Alt+0</td><td style="text-align:center">将当前活动窗口设为摄像机视图</td></tr><tr><td style="text-align:center">Ctrl+Alt+q</td><td style="text-align:center">四视图切换</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">聚焦物体</td></tr><tr><td style="text-align:center">Ctrl+.</td><td style="text-align:center">将四个视图都聚焦</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">屏蔽其他物体</td></tr><tr><td style="text-align:center">Home</td><td style="text-align:center">显示全场景</td></tr><tr><td style="text-align:center">Ctrl+`</td><td style="text-align:center">显示/关闭Gizmo</td></tr><tr><td style="text-align:center">G</td><td style="text-align:center">移动</td></tr><tr><td style="text-align:center">R</td><td style="text-align:center">旋转</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">缩放</td></tr><tr><td style="text-align:center">A</td><td style="text-align:center">全选</td></tr><tr><td style="text-align:center">AA</td><td style="text-align:center">取消全选</td></tr><tr><td style="text-align:center">W</td><td style="text-align:center">切换选择模式</td></tr><tr><td style="text-align:center">Ctrl+Space</td><td style="text-align:center">鼠标所在窗口最大化</td></tr><tr><td style="text-align:center">Ctrl+Alt+Space</td><td style="text-align:center">鼠标所在窗口最大化（隐藏功能区）</td></tr><tr><td style="text-align:center">Shift+D</td><td style="text-align:center">非关联复制</td></tr><tr><td style="text-align:center">Shift+右键</td><td style="text-align:center">移动游标</td></tr><tr><td style="text-align:center">，</td><td style="text-align:center">弹出坐标菜单</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">弹出变换轴心点菜单</td></tr><tr><td style="text-align:center">Shift+Tab</td><td style="text-align:center">打开/关闭吸附</td></tr><tr><td style="text-align:center">O</td><td style="text-align:center">打开/关闭衰减编辑</td></tr><tr><td style="text-align:center">Ctrl+.</td><td style="text-align:center">进入/退出原点移动模式</td></tr><tr><td style="text-align:center">Shift+Z</td><td style="text-align:center">进入透显模式</td></tr><tr><td style="text-align:center">Shift+S</td><td style="text-align:center">进行游标操作</td></tr><tr><td style="text-align:center">Ctrl+J</td><td style="text-align:center">合并</td></tr><tr><td style="text-align:center">L</td><td style="text-align:center">选中相连元素</td></tr><tr><td style="text-align:center">P</td><td style="text-align:center">拆分</td></tr><tr><td style="text-align:center">Shift+R</td><td style="text-align:center">重做</td></tr><tr><td style="text-align:center">Shift+~</td><td style="text-align:center">进入第一人称模式<br>在此模式下可以通过WASD进行移动，Q下降，E上升<br>Shift加速移动，Alt减速移动<br>空格键位移至准星指定的位置</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">设置关键帧</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">隐藏</td></tr><tr><td style="text-align:center">Alt+H</td><td style="text-align:center">显示</td></tr><tr><td style="text-align:center"><img src="/2022/01/12/Blender%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/image-20220114192932983.png" alt="image-20220114192932983"></td><td style="text-align:center">显示禁用&amp;渲染禁用</td></tr><tr><td style="text-align:center">Ctrl+P</td><td style="text-align:center">建立父子级</td></tr><tr><td style="text-align:center">Alt+P</td><td style="text-align:center">清空父子级</td></tr><tr><td style="text-align:center">Ctrl+M</td><td style="text-align:center">镜像</td></tr><tr><td style="text-align:center">Ctrl+I</td><td style="text-align:center">反选</td></tr><tr><td style="text-align:center">Alt+E</td><td style="text-align:center">打开挤出菜单</td></tr><tr><td style="text-align:center">Ctrl+B</td><td style="text-align:center">倒角<br>参数解释：<br><img src="/2022/01/12/Blender%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/image-20220115093756916.png" alt="image-20220115093756916"></td></tr><tr><td style="text-align:center"></td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/01/12/Blender%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/u=2994461402,3237906530&amp;amp;fm=26&amp;amp;fmt=auto.jpeg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Blender" scheme="https://fsjz2020.github.io/tags/Blender/"/>
    
  </entry>
  
  <entry>
    <title>mermaid学习</title>
    <link href="https://fsjz2020.github.io/2022/01/03/mermaid%E5%AD%A6%E4%B9%A0/"/>
    <id>https://fsjz2020.github.io/2022/01/03/mermaid%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-01-03T08:48:08.000Z</published>
    <updated>2022-01-05T10:59:56.118Z</updated>
    
    <content type="html"><![CDATA[<p>Mermaid是一个用于画流程图、状态图、时序图、甘特图的库，广泛用于Markdown编辑中。</p><span id="more"></span><h1 id="流程图-flowchart"><a href="#流程图-flowchart" class="headerlink" title="流程图(flowchart)"></a>流程图(flowchart)</h1><h2 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h2><div class="table-container"><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">字符</th></tr></thead><tbody><tr><td style="text-align:center">TB</td><td style="text-align:center">从上到下</td></tr><tr><td style="text-align:center">TD</td><td style="text-align:center">从上到下</td></tr><tr><td style="text-align:center">BT</td><td style="text-align:center">从下到上</td></tr><tr><td style="text-align:center">RL</td><td style="text-align:center">从右向左</td></tr><tr><td style="text-align:center">LR</td><td style="text-align:center">从左向右</td></tr></tbody></table></div><h2 id="节点形状"><a href="#节点形状" class="headerlink" title="节点形状"></a>节点形状</h2><h3 id="默认节点"><a href="#默认节点" class="headerlink" title="默认节点"></a>默认节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID</span><br></pre></td></tr></table></figure><h2 id="带文本的节点"><a href="#带文本的节点" class="headerlink" title="带文本的节点"></a>带文本的节点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID[This is the text]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID[This is the text]</span><br></pre></td></tr></table></figure><h3 id="圆角节点"><a href="#圆角节点" class="headerlink" title="圆角节点"></a>圆角节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID(This is the text)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID(This is the text)</span><br></pre></td></tr></table></figure><h3 id="子程序形状的节点"><a href="#子程序形状的节点" class="headerlink" title="子程序形状的节点"></a>子程序形状的节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID[[This is the text]]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID[[This is the text]]</span><br></pre></td></tr></table></figure><h3 id="圆柱形状的节点"><a href="#圆柱形状的节点" class="headerlink" title="圆柱形状的节点"></a>圆柱形状的节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID[(This is the text)]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID[(This is the text)]</span><br></pre></td></tr></table></figure><h3 id="圆形节点"><a href="#圆形节点" class="headerlink" title="圆形节点"></a>圆形节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID((This is the text))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID((This is the text))</span><br></pre></td></tr></table></figure><h3 id="不对称形状的节点"><a href="#不对称形状的节点" class="headerlink" title="不对称形状的节点"></a>不对称形状的节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID&gt;This is the text]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID&gt;This is the text]</span><br></pre></td></tr></table></figure><h3 id="菱形节点"><a href="#菱形节点" class="headerlink" title="菱形节点"></a>菱形节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID&#123;This is the text&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID&#123;This is the text&#125;</span><br></pre></td></tr></table></figure><h3 id="六边形"><a href="#六边形" class="headerlink" title="六边形"></a>六边形</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID&#123;&#123;This is the text&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID&#123;&#123;This is the text&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="平行四边形"><a href="#平行四边形" class="headerlink" title="平行四边形"></a>平行四边形</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID[\This is the text\]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID[\This is the text\]</span><br></pre></td></tr></table></figure><h3 id="另一种平行四边形"><a href="#另一种平行四边形" class="headerlink" title="另一种平行四边形"></a>另一种平行四边形</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID[/This is the text/]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID[/This is the text/]</span><br></pre></td></tr></table></figure><h3 id="梯形"><a href="#梯形" class="headerlink" title="梯形"></a>梯形</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID[/This is the text\]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID[/This is the text\]</span><br></pre></td></tr></table></figure><h3 id="倒梯形"><a href="#倒梯形" class="headerlink" title="倒梯形"></a>倒梯形</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID[\This is the text/]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">ID[\This is the text/]</span><br></pre></td></tr></table></figure><h2 id="节点之间的连接"><a href="#节点之间的连接" class="headerlink" title="节点之间的连接"></a>节点之间的连接</h2><h2 id="带箭头的链接"><a href="#带箭头的链接" class="headerlink" title="带箭头的链接"></a>带箭头的链接</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A--&gt;B</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A--&gt;B</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实线连接"><a href="#实线连接" class="headerlink" title="实线连接"></a>实线连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A---B</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A---B</span><br></pre></td></tr></table></figure><h3 id="链接带文字"><a href="#链接带文字" class="headerlink" title="链接带文字"></a>链接带文字</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A--This is a text!---B</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A--This is a text!---B</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A---|This is a text!|B</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A---|This is a text!|B</span><br></pre></td></tr></table></figure><h3 id="带箭头和文本的连接"><a href="#带箭头和文本的连接" class="headerlink" title="带箭头和文本的连接"></a>带箭头和文本的连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A--This is a text!--&gt;B</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A--This is a text!--&gt;B</span><br></pre></td></tr></table></figure><h3 id="虚线连接"><a href="#虚线连接" class="headerlink" title="虚线连接"></a>虚线连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A-.-B</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A-.-B</span><br></pre></td></tr></table></figure><h3 id="虚线箭头连接"><a href="#虚线箭头连接" class="headerlink" title="虚线箭头连接"></a>虚线箭头连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A-.-&gt;B</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A-.-&gt;B</span><br></pre></td></tr></table></figure><h3 id="粗实线连接"><a href="#粗实线连接" class="headerlink" title="粗实线连接"></a>粗实线连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A===B</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A===B</span><br></pre></td></tr></table></figure><h3 id="粗实线箭头连接"><a href="#粗实线箭头连接" class="headerlink" title="粗实线箭头连接"></a>粗实线箭头连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A==&gt;B</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A==&gt;B</span><br></pre></td></tr></table></figure><h3 id="其他连接方式"><a href="#其他连接方式" class="headerlink" title="其他连接方式"></a>其他连接方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A--oB--xCo--oD&lt;--&gt;Ex--xF</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A--oB--xC o--oD&lt;--&gt;E x--xF</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">A &amp; B &amp; C ---&gt; D &amp; E &amp; F</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">A &amp; B &amp; C ---&gt; D &amp; E &amp; F</span><br></pre></td></tr></table></figure><h2 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subgraph title</span><br><span class="line">graph definition</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">c1--&gt;a2</span><br><span class="line">subgraph one[名字]</span><br><span class="line">a1--&gt;a2</span><br><span class="line">end</span><br><span class="line">subgraph two</span><br><span class="line">b1--&gt;b2</span><br><span class="line">end</span><br><span class="line">subgraph three</span><br><span class="line">c1--&gt;c2</span><br><span class="line">end</span><br><span class="line">one--&gt;two</span><br><span class="line">two--&gt;three</span><br><span class="line">three--&gt;a2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">c1--&gt;a2</span><br><span class="line">subgraph one[名字]</span><br><span class="line">a1--&gt;a2</span><br><span class="line">end</span><br><span class="line">subgraph two</span><br><span class="line">b1--&gt;b2</span><br><span class="line">end</span><br><span class="line">subgraph three</span><br><span class="line">c1--&gt;c2</span><br><span class="line">end</span><br><span class="line">one--&gt;two</span><br><span class="line">two--&gt;three</span><br><span class="line">three--&gt;a2</span><br></pre></td></tr></table></figure><h2 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1(Start)--&gt;id2(Stop)</span><br><span class="line">    style id1 fill:#f9f,stroke:#333,stroke-width:4px</span><br><span class="line">    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    id1(Start)--&gt;id2(Stop)</span><br><span class="line">    style id1 fill:#f9f,stroke:#333,stroke-width:4px</span><br><span class="line">    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5</span><br></pre></td></tr></table></figure><h1 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br><span class="line">    Alice-&gt;&gt;John: See you later!</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Mermaid是一个用于画流程图、状态图、时序图、甘特图的库，广泛用于Markdown编辑中。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Markdown" scheme="https://fsjz2020.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>VIM学习笔记</title>
    <link href="https://fsjz2020.github.io/2022/01/01/VIM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://fsjz2020.github.io/2022/01/01/VIM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-01T11:00:38.000Z</published>
    <updated>2022-01-04T03:18:22.872Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/01/01/VIM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/u=3819990135,2416729285&fm=26&fmt=auto.png" alt="img" style="zoom: 20%;"></p><span id="more"></span><p><strong>启动</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><p>Vim从一个名为<code>.vimrc</code>的文件读取配置信息。在Linux中<code>.vimrc</code>位于用户根目录中，即<code>/home/&lt;用户名&gt;/.vimrc</code></p><p>Windows系统配置文件名称为_vimrc,可以通过在VIM命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:echo $MYVIMRC</span><br></pre></td></tr></table></figure><p>显示<code>.vimrc</code>的路径</p><p>vimrc更改后可以重启Vim或者在Vim中执行<code>source $MYVIMRC</code>命令</p><h1 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h1><p>可以通过<code>:ls</code>或<code>:buffers</code> 或<code>:files</code>显示缓冲区</p><p><img src="/2022/01/01/VIM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220102094440797.png" alt="image-20220102094440797"></p><ul><li>1为缓冲区编号，在整个VIM会话中，值保持不变</li><li>%表示缓冲区位于当前窗口中</li><li>a表示这个缓冲区被选中</li><li>123.py为文件名</li><li>第 31 行代表光标位置</li></ul><h1 id="移动方式"><a href="#移动方式" class="headerlink" title="移动方式"></a>移动方式</h1><p><img src="/2022/01/01/VIM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220103154219240.png" alt="image-20220103154219240"></p><h1 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h1><p>通过i可以进行插入，但还有别的插入方法</p><ul><li>a可以在光标后面进行插入</li><li>A能在当前行行尾进行插入模式</li><li>I用于在行首插入</li><li>o在光标下面插入一行，在新行插入</li><li>O在光标上面插入一行，在新行插入</li><li>gi用于在最后退出的位置进行插入</li><li>C用于删除光标右面的文字，然后进行插入</li><li>cc或S用于删除当前行的内容，然后进行插入</li><li>s用于删除单个字符，然后插入</li></ul><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><h2 id="用-和-搜索"><a href="#用-和-搜索" class="headerlink" title="用/和?搜索"></a>用/和?搜索</h2><p>在命令行输入/或者?，按下Enter，就会高亮显示每个匹配项。按n遍历所有匹配位置，按N反向遍历。可以用<code>noh</code>清除高亮显示。</p><h2 id="跨文件搜索"><a href="#跨文件搜索" class="headerlink" title="跨文件搜索"></a>跨文件搜索</h2><p>命令行输入<code>:vimgrep</code>，语法为:vimgrep &lt;模式&gt; &lt;路径&gt;。</p><p>模式既可以是字符，也可以是Vim风格的正则表达式。当路径为**时，表示对目录递归搜索。</p><p>搜索结果出来以后，可以用:cn或:cp来浏览各匹配项。也可以执行:copen命令，然后可视化显示快速恢复窗口。</p><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p>在VIM中复制和粘贴文本，文本是存储在VIM寄存器里面的。</p><p>寄存器访问方式是引号键”,后面接寄存器的标识符，然后是针对寄存器的操作。</p><p>复制和粘贴操作默认是无名寄存器，用双引号”来标识。””p等同于p。</p><p>寄存器分为a-z，0-9</p><p>用数字编号的寄存器存储的是最后10次删除操作的历史记录</p><p><img src="/2022/01/01/VIM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220104111319195.png" alt="image-20220104111319195"></p><p>还有一些只读寄存器</p><blockquote><p>%存储了当前文件名</p><h1 id="存储了上次打开的文件"><a href="#存储了上次打开的文件" class="headerlink" title="存储了上次打开的文件"></a>存储了上次打开的文件</h1><p>.中为最后插入的文本</p><p>:为最后执行的命令</p></blockquote><p>使用Ctrl+r组合键可以在插入模式下粘贴内容</p><p>可以用:reg列出所有寄存器内容</p><p>y会覆盖寄存器的内容，若是想附加使用大写如”Ayw</p><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><div class="table-container"><table><thead><tr><th>快捷键(命令模式下)</th><th>所代表含义</th></tr></thead><tbody><tr><td>w</td><td>（write)保存</td></tr><tr><td>w+名字</td><td>另存为</td></tr><tr><td>q</td><td>(quit)退出</td></tr><tr><td>q!</td><td>强制退出</td></tr><tr><td>e</td><td>(edit)打开文件</td></tr><tr><td>h</td><td>(help)帮助</td></tr><tr><td>h cc Ctrl+D</td><td>展开多个关于cc的关键字</td></tr><tr><td>ls 或 buffers 或 files</td><td>显示缓存区列表</td></tr><tr><td>b</td><td>切换编辑文件，如b1 或 b cat</td></tr><tr><td>bn和bp</td><td>(bnext)和(bprevious)循环遍历缓存区</td></tr><tr><td>bd</td><td>删除缓存区</td></tr><tr><td>sp</td><td>(split)垂直分割窗口</td></tr><tr><td>vs</td><td>(vsplit)水平分割窗口</td></tr><tr><td>res N</td><td>(resize)用于将窗口高度设置为N</td></tr><tr><td>vert res N</td><td>(vertical resize)用于将窗口宽度设置为N</td></tr><tr><td>res +N或-N</td><td>将当前窗口增加N行或减少N行</td></tr><tr><td>vert res +N或-N</td><td>将当前窗口增加N列或减少N列</td></tr><tr><td>tabnew</td><td>在新标签页打开空缓存区</td></tr><tr><td>tabnext（或快捷键gt)</td><td>下一个标签页</td></tr><tr><td>tabprevious（或快捷键gT）</td><td>用于切换到上一个标签页</td></tr><tr><td>tabclose</td><td>关闭标签页</td></tr><tr><td>tabmove N</td><td>将当前标签页移动到第N个标签页之后</td></tr><tr><td>Ex(Explore)</td><td>打开文件浏览窗口</td></tr><tr><td>30</td><td>跳转到第30行</td></tr><tr><td>±5</td><td>向上/下移动5行</td></tr><tr><td></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>快捷键（正常模式下）</th><th>所代表含义</th></tr></thead><tbody><tr><td>H J K L</td><td>向左 向下 向上 向右移动光标(5j表示向下移动5个字符)</td></tr><tr><td>W/w</td><td>移动到下一个单词的开头(广义)/(狭义)</td></tr><tr><td>E/e</td><td>移动到下一个单词的结尾(广义)/(狭义)</td></tr><tr><td>ge</td><td>移动到上一个单词的结尾</td></tr><tr><td>B/b</td><td>移动到上一个单词的开头(广义)/(狭义)</td></tr><tr><td>{</td><td>向前移动一个段落</td></tr><tr><td>}</td><td>向后移动一个段落</td></tr><tr><td>(</td><td>将光标移动到句子的开头</td></tr><tr><td>)</td><td>将光标移动到句子的结尾</td></tr><tr><td>/</td><td>在文档中搜索该字符串</td></tr><tr><td>?</td><td>反向搜索字符串</td></tr><tr><td>u</td><td>撤销</td></tr><tr><td>Ctrl+r</td><td>重做此操作</td></tr><tr><td>c</td><td>(change)修改命令，删除一部分文字后立即进入编辑模式</td></tr><tr><td>d</td><td>(delete)删除命令，如d3e，删除3个单词</td></tr><tr><td>cc</td><td>删除整行，立即进入编辑模式，保持当前的缩进水平</td></tr><tr><td>dd</td><td>删除整行</td></tr><tr><td>gg</td><td>跳转到文件开头</td></tr><tr><td>G</td><td>跳转到文件结尾</td></tr><tr><td>Ctrl+f(或PageDown)</td><td>向下翻页</td></tr><tr><td>Ctrl+b(或PageUp)</td><td>向上翻页</td></tr><tr><td>v</td><td>进入可视模式</td></tr><tr><td>Crtl+w,q</td><td>关闭当前窗口</td></tr><tr><td>Ctrl+w,o</td><td>(only)关闭除当前窗口以外的所有窗口</td></tr><tr><td>Ctrl+w,HJKL</td><td>将当前窗口移动到屏幕的最左/底/顶/右边</td></tr><tr><td>Ctrl+w,=</td><td>将所有打开的窗口宽高调整为一致</td></tr><tr><td>Ctrl+w,+或-</td><td>用于改变窗口的一行高度</td></tr><tr><td>Ctrl+w,&lt;或&gt;</td><td>用于改变窗口的一列宽度</td></tr><tr><td>zo</td><td>打开当前折叠</td></tr><tr><td>zc</td><td>关闭当前折叠</td></tr><tr><td>za</td><td>切换折叠状态</td></tr><tr><td>zR</td><td>同时打开所有折叠</td></tr><tr><td>zM</td><td>同时关闭所有折叠</td></tr><tr><td>t[字符]</td><td>(un<strong>t</strong>il)用于在<strong>当前行内</strong>搜索该字符，并将光标置于此字符之前，T为反向搜索</td></tr><tr><td>f[字符]</td><td>(<strong>f</strong>ind)在<strong>当前行内</strong>搜索该字符，将光标置于此字符之上</td></tr><tr><td>_</td><td>将光标放到行首</td></tr><tr><td>$</td><td>将光标置于行尾</td></tr><tr><td>y</td><td>复制</td></tr><tr><td>p</td><td>粘贴</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/01/01/VIM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/u=3819990135,2416729285&amp;fm=26&amp;fmt=auto.png&quot; alt=&quot;img&quot; style=&quot;zoom: 20%;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="VIM" scheme="https://fsjz2020.github.io/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式学习</title>
    <link href="https://fsjz2020.github.io/2021/11/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    <id>https://fsjz2020.github.io/2021/11/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-11-07T16:16:30.000Z</published>
    <updated>2021-11-08T07:25:01.970Z</updated>
    
    <content type="html"><![CDATA[<p>.</p><span id="more"></span><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><div class="table-container"><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td>\w</td><td>匹配字母数字下划线汉字</td></tr><tr><td>\s</td><td>匹配任意空白符</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\b</td><td>匹配单词的开始或结束</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr><tr><td>\un</td><td>匹配n，其中n是一个用四个十六进制数字表示的Unicode字符</td></tr></tbody></table></div><h2 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h2><div class="table-container"><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\W</td><td>匹配不是字母数字下划线汉字的字符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>\D</td><td>匹配不是数字的字符</td></tr><tr><td>\B</td><td>匹配不是单词的开始或结束的位置</td></tr><tr><td><sup><a href="#fn_x" id="reffn_x">x</a></sup></td><td>匹配除x以外的任意字符</td></tr></tbody></table></div><h2 id="重复限定符"><a href="#重复限定符" class="headerlink" title="重复限定符"></a>重复限定符</h2><div class="table-container"><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复0次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>？</td><td>重复0次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table></div><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>正则表达式以小括号()来做分组</p><blockquote><p>^(ab)*   //匹配字符串中0到多个ab开头</p></blockquote><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>用\转义被正则表达式使用的字符</p><blockquote><p>^(\(ab\))*</p></blockquote><h2 id="条件或"><a href="#条件或" class="headerlink" title="条件或"></a>条件或</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(130|131|132|155|156|185|145|176)\d&#123;8&#125;$</span><br></pre></td></tr></table></figure><h2 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h2><ol><li>限定0到9可以写成[0-9]</li><li>限定A-Z写成[A-Z]</li><li>限定某些字母[aeiou]</li></ol><h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><ol><li>断言：选择在所给规则的区间内出现的内容</li><li>零宽：断言只占匹配位置，不占字符，匹配结果不返回断言本身</li></ol><h3 id="1-正向先行断言"><a href="#1-正向先行断言" class="headerlink" title="1. 正向先行断言"></a>1. 正向先行断言</h3><ul><li>语法：(?=pattern)</li><li>作用：匹配pattern表达式前面的内容，不返回本身</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;read-count&quot;</span>&gt;</span>阅读数：641<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用<code>\d+(?=&lt;/span&gt;)</code>可以匹配到641</p><h3 id="2-正向后行断言"><a href="#2-正向后行断言" class="headerlink" title="2.正向后行断言"></a>2.正向后行断言</h3><ul><li>语法：(?&lt;=pattern)</li><li>作用：匹配pattern表达式前面的内容，不返回本身</li></ul><p>用<code>(?&lt;=&lt;span class=&quot;read-count&quot;&gt;阅读数：)\d+</code>可以匹配到641</p><h3 id="3-负向先行断言"><a href="#3-负向先行断言" class="headerlink" title="3. 负向先行断言"></a>3. 负向先行断言</h3><ul><li>语法：（?!pattern)</li><li>作用：匹配非pattern表达式前面内容</li></ul><h3 id="4-负向后行断言"><a href="#4-负向后行断言" class="headerlink" title="4. 负向后行断言"></a>4. 负向后行断言</h3><ul><li>语法：（?&lt;!pattern)</li><li>作用：匹配非pattern表达式后面内容</li></ul><h2 id="捕获和非捕获"><a href="#捕获和非捕获" class="headerlink" title="捕获和非捕获"></a>捕获和非捕获</h2><h3 id="1-数字编号捕获组"><a href="#1-数字编号捕获组" class="headerlink" title="1.数字编号捕获组"></a>1.数字编号捕获组</h3><ul><li>语法：(exp)</li></ul><p>例：<code>(0\d&#123;2&#125;)-(\d&#123;8&#125;)</code> 020-85653333</p><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">编号</th><th style="text-align:center">分组</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">(0\d{2})-(\d{8})</td><td style="text-align:center">020-85653333</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">(0\d{2})</td><td style="text-align:center">020</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">(\d{8})</td><td style="text-align:center">85653333</td></tr></tbody></table></div><h3 id="2-命名编号捕获组"><a href="#2-命名编号捕获组" class="headerlink" title="2. 命名编号捕获组"></a>2. 命名编号捕获组</h3><ul><li>语法：(?\<name>exp)</name></li></ul><p>例：<code>(?&lt;quhao&gt;0\d&#123;2&#125;)-(?&lt;haoma&gt;\d&#123;8&#125;)</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">名称</th><th style="text-align:center">分组</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">(0\d{2})-(\d{8})</td><td style="text-align:center">020-85653333</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">quhao</td><td style="text-align:center">(0\d{2})</td><td style="text-align:center">020</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">haoma</td><td style="text-align:center">(\d{8})</td><td style="text-align:center">85653333</td></tr></tbody></table></div><h3 id="3-非捕获组"><a href="#3-非捕获组" class="headerlink" title="3. 非捕获组"></a>3. 非捕获组</h3><p>语法：(?:exp)</p><p>例：<code>(?:0\d&#123;2&#125;)-(\d&#123;8&#125;)</code><br>| 序号 | 编号 |       分组       |     内容     |<br>| :—: | :—: | :———————: | :—————: |<br>|  0   |  0   | (0\d{2})-(\d{8}) | 020-85653333 |<br>|  1   |  1   |     (\d{8})      |   85653333   |</p><h3 id="4-反向引用"><a href="#4-反向引用" class="headerlink" title="4. 反向引用"></a>4. 反向引用</h3><ol><li><p>数字编号组反向引用：\number</p></li><li><p>命名编号组反向引用：\k\<name></name></p></li></ol><p>如匹配重复的字符可使用<code>(\w)\1</code></p><h2 id="贪婪和非贪婪"><a href="#贪婪和非贪婪" class="headerlink" title="贪婪和非贪婪"></a>贪婪和非贪婪</h2><h3 id="1-贪婪"><a href="#1-贪婪" class="headerlink" title="1. 贪婪"></a>1. 贪婪</h3><p>默认情况下匹配尽可能多的字符，如<code>\d&#123;2,6&#125;</code>在满足6个字符的条件下会匹配6个</p><h3 id="2-非贪婪"><a href="#2-非贪婪" class="headerlink" title="2. 非贪婪"></a>2. 非贪婪</h3><p>懒惰量词是在贪婪量词后边加个<code>?</code></p><div class="table-container"><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>重复0次或更多次,但尽可能少重复</td></tr><tr><td>+?</td><td>重复一次或更多次,但尽可能少重复</td></tr><tr><td>??</td><td>重复0次或一次,但尽可能少重复</td></tr><tr><td>{n,}?</td><td>重复n次或更多次,但尽可能少重复</td></tr><tr><td>{n,m}?</td><td>重复n到m次,但尽可能少重复</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="re" scheme="https://fsjz2020.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>一种十分简单的边缘检测算法</title>
    <link href="https://fsjz2020.github.io/2021/10/25/%E4%B8%80%E7%A7%8D%E5%8D%81%E5%88%86%E7%AE%80%E5%8D%95%E7%9A%84%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95/"/>
    <id>https://fsjz2020.github.io/2021/10/25/%E4%B8%80%E7%A7%8D%E5%8D%81%E5%88%86%E7%AE%80%E5%8D%95%E7%9A%84%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95/</id>
    <published>2021-10-25T14:45:24.000Z</published>
    <updated>2021-10-25T15:01:50.900Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/10/25/%E4%B8%80%E7%A7%8D%E5%8D%81%E5%88%86%E7%AE%80%E5%8D%95%E7%9A%84%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95/untitled.jpg" alt="untitled" style="zoom: 25%;"></p><span id="more"></span><p>某天某人在路上走着，思索着如何分辨图像中不同的物体，想到了一种十分简陋的算法（相比于其他专业的算法）。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>检测一个像素与周围两个像素的差值，如果差值超过阈值则检测出来（原理就是这么简单😂）。</p><p><img src="/2021/10/25/%E4%B8%80%E7%A7%8D%E5%8D%81%E5%88%86%E7%AE%80%E5%8D%95%E7%9A%84%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95/image-20211025225219662.png" alt="image-20211025225219662" style="zoom:50%;"></p><p>很快啊，就把这个代码写出来了，但是效果不太理想，主要是图像中的噪点太多了。我发现这些噪点大多都有孤立分布的特点，于是写了个降噪函数。检测哪些点周围的亮点少于指定个数就把那个点变成暗点。</p><p>于是噪点少了，但也有一个很严重的问题是，图像的边缘也变窄消失了，于是又编写了一个增强函数，原理与降噪函数相反。</p><p>在参数调的较好的情况下可以获得一个不错的效果。</p><p><strong>原图</strong></p><blockquote><p><img src="/2021/10/25/%E4%B8%80%E7%A7%8D%E5%8D%81%E5%88%86%E7%AE%80%E5%8D%95%E7%9A%84%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95/Aston Martin Supercars_Ultra HD.jpg" alt="Aston Martin Supercars_Ultra HD"></p></blockquote><p><strong>效果图</strong></p><blockquote><p><img src="/2021/10/25/%E4%B8%80%E7%A7%8D%E5%8D%81%E5%88%86%E7%AE%80%E5%8D%95%E7%9A%84%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95/untitled1.jpg" alt="untitled1"></p></blockquote><p>结尾附上代码</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">a=imread(<span class="string">&#x27;file.jpg&#x27;</span>);<span class="comment">%读入文件名称</span></span><br><span class="line">t=<span class="number">15</span>;<span class="comment">%检测阈值，当一个像素与其他像素差多大时检测出来</span></span><br><span class="line">s=<span class="built_in">size</span>(a);</span><br><span class="line">b=<span class="built_in">zeros</span>(s(<span class="number">1</span>)<span class="number">-1</span>,s(<span class="number">2</span>)<span class="number">-1</span>,<span class="number">3</span>);</span><br><span class="line">d=<span class="built_in">zeros</span>(s(<span class="number">1</span>)<span class="number">-1</span>,s(<span class="number">2</span>)<span class="number">-1</span>,<span class="number">3</span>);</span><br><span class="line">b1=<span class="built_in">zeros</span>(s(<span class="number">1</span>)<span class="number">-1</span>,s(<span class="number">2</span>)<span class="number">-1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:s(<span class="number">1</span>)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:s(<span class="number">2</span>)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> k=<span class="number">1</span>:<span class="number">3</span></span><br><span class="line">            b(<span class="built_in">i</span>,<span class="built_in">j</span>,k)=a(<span class="built_in">i</span>,<span class="built_in">j</span>,k)-a(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>,k);<span class="comment">%横向比较</span></span><br><span class="line">            d(<span class="built_in">i</span>,<span class="built_in">j</span>,k)=a(<span class="built_in">i</span>,<span class="built_in">j</span>,k)-a(<span class="built_in">i</span>,<span class="built_in">j</span>+<span class="number">1</span>,k);<span class="comment">%纵向比较</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:s(<span class="number">1</span>)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:s(<span class="number">2</span>)<span class="number">-1</span></span><br><span class="line">        b1(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">1</span>)=b(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">1</span>)+b(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">2</span>)+b(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">3</span>);<span class="comment">%RGB差值求和</span></span><br><span class="line">        b1(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">2</span>)=d(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">1</span>)+d(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">2</span>)+d(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">c=<span class="built_in">zeros</span>(s(<span class="number">1</span>)<span class="number">-1</span>,s(<span class="number">2</span>)<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:s(<span class="number">1</span>)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:s(<span class="number">2</span>)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">if</span> b1(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">1</span>)&gt;t || b1(<span class="built_in">i</span>,<span class="built_in">j</span>,<span class="number">2</span>)&gt;t</span><br><span class="line">            c(<span class="built_in">i</span>,<span class="built_in">j</span>)=<span class="number">255</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            c(<span class="built_in">i</span>,<span class="built_in">j</span>)=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%% 去除噪点，将周围小于5的亮位变暗，两轮</span></span><br><span class="line">e=decrease(c,<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">%% 图像增强，将周围大于6的空位点亮，两轮</span></span><br><span class="line">e=increase(e,<span class="number">5</span>,<span class="number">4</span>);</span><br><span class="line"><span class="comment">%% </span></span><br><span class="line">imshow(e)</span><br><span class="line"><span class="comment">%% 降噪函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">result</span>=<span class="title">decrease</span><span class="params">(data,value,times)</span></span></span><br><span class="line">result=data;</span><br><span class="line">s=<span class="built_in">size</span>(data);</span><br><span class="line">    <span class="keyword">for</span> t=<span class="number">1</span>:times</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:s(<span class="number">1</span>)<span class="number">-1</span></span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">2</span>:s(<span class="number">2</span>)<span class="number">-1</span></span><br><span class="line">                <span class="keyword">if</span> data(<span class="built_in">i</span>,<span class="built_in">j</span>)==<span class="number">255</span></span><br><span class="line">                    <span class="keyword">if</span> data(<span class="built_in">i</span><span class="number">-1</span>,<span class="built_in">j</span><span class="number">-1</span>)+data(<span class="built_in">i</span>,<span class="built_in">j</span><span class="number">-1</span>)+data(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span><span class="number">-1</span>)+data(<span class="built_in">i</span><span class="number">-1</span>,<span class="built_in">j</span>)+data(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>)+data(<span class="built_in">i</span><span class="number">-1</span>,<span class="built_in">j</span>+<span class="number">1</span>)+data(<span class="built_in">i</span>,<span class="built_in">j</span>+<span class="number">1</span>)+data(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>+<span class="number">1</span>)&lt;<span class="number">255</span>*value</span><br><span class="line">                        result(<span class="built_in">i</span>,<span class="built_in">j</span>)=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        data=result;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%% 图像增强函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">result</span>=<span class="title">increase</span><span class="params">(data,value,times)</span></span></span><br><span class="line">result=data;</span><br><span class="line">s=<span class="built_in">size</span>(data);</span><br><span class="line">    <span class="keyword">for</span> t=<span class="number">1</span>:times</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:s(<span class="number">1</span>)<span class="number">-1</span></span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">2</span>:s(<span class="number">2</span>)<span class="number">-1</span></span><br><span class="line">                <span class="keyword">if</span> data(<span class="built_in">i</span>,<span class="built_in">j</span>)==<span class="number">0</span></span><br><span class="line">                    <span class="keyword">if</span> data(<span class="built_in">i</span><span class="number">-1</span>,<span class="built_in">j</span><span class="number">-1</span>)+data(<span class="built_in">i</span>,<span class="built_in">j</span><span class="number">-1</span>)+data(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span><span class="number">-1</span>)+data(<span class="built_in">i</span><span class="number">-1</span>,<span class="built_in">j</span>)+data(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>)+data(<span class="built_in">i</span><span class="number">-1</span>,<span class="built_in">j</span>+<span class="number">1</span>)+data(<span class="built_in">i</span>,<span class="built_in">j</span>+<span class="number">1</span>)+data(<span class="built_in">i</span>+<span class="number">1</span>,<span class="built_in">j</span>+<span class="number">1</span>)&gt;<span class="number">255</span>*value</span><br><span class="line">                        result(<span class="built_in">i</span>,<span class="built_in">j</span>)=<span class="number">255</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        data=result;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/10/25/%E4%B8%80%E7%A7%8D%E5%8D%81%E5%88%86%E7%AE%80%E5%8D%95%E7%9A%84%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95/untitled.jpg&quot; alt=&quot;untitled&quot; style=&quot;zoom: 25%;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Matlab" scheme="https://fsjz2020.github.io/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>CTF Web学习</title>
    <link href="https://fsjz2020.github.io/2021/10/24/CTF%20Web%E5%AD%A6%E4%B9%A0/"/>
    <id>https://fsjz2020.github.io/2021/10/24/CTF%20Web%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-10-24T08:23:34.000Z</published>
    <updated>2021-10-25T15:04:28.047Z</updated>
    
    <content type="html"><![CDATA[<p>.</p><span id="more"></span><h2 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h2><p>robots.txt是一个纯文本文件，在这个文件中网站管理者可以声明该网站中不想被robots访问的部分，或者指定搜索引擎只收录指定的内容。</p><p>当一个搜索机器人（有的叫搜索蜘蛛）访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，那么搜索机器人就沿着链接抓取。</p><p>另外，robots.txt必须放置在一个站点的根目录下，而且文件名必须全部小写。</p><p>例：B站的robots.txt</p><p><img src="/2021/10/24/CTF%20Web%E5%AD%A6%E4%B9%A0/image-20211024162701745.png" alt="image-20211024162701745"></p><h1 id="文件备份"><a href="#文件备份" class="headerlink" title="文件备份"></a>文件备份</h1><p>常见的备份文件后缀名有: <code>.git .svn .swp .svn .~ .bak .bash_history</code></p><h1 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h1><p> Cookie是当主机访问Web服务器时，由 Web 服务器创建的，将信息存储在用户计算机上的文件。一般网络用户习惯用其复数形式 Cookies，指某些网站为了辨别用户身份、进行 Session 跟踪而存储在用户本地终端上的数据，而这些数据通常会经过加密处理。</p><p>通过Chrome查看Cookie</p><p><img src="/2021/10/24/CTF%20Web%E5%AD%A6%E4%B9%A0/image-20211024163920338.png" alt="image-20211024163920338"></p><p>Get-Flag</p><p><img src="/2021/10/24/CTF%20Web%E5%AD%A6%E4%B9%A0/image-20211024164007289.png" alt="image-20211024164007289"></p><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><p>php中有两种比较符号</p><p><code>===</code>会同时比较字符串的值和类型</p><p><code>==</code>会先将字符串换成相同类型，再作比较，属于弱类型比较</p><p>php中的弱类型比较会使’abc’ == 0为真,（abc可换成任意字符）</p><p>php中弱类型比较时，会使(‘1234a’ == 1234)为真</p><p><img src="/2021/10/24/CTF%20Web%E5%AD%A6%E4%B9%A0/image-20211024165034653.png" alt="image-20211024165034653"></p><h1 id="两种传参方式-GET和POST"><a href="#两种传参方式-GET和POST" class="headerlink" title="两种传参方式 GET和POST"></a>两种传参方式 GET和POST</h1><p>GET方式直接在网址后接？变量名=值，POST方式可用Hackbar或Burp传递</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="https://fsjz2020.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Chrome快捷键</title>
    <link href="https://fsjz2020.github.io/2021/10/10/Chrome%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://fsjz2020.github.io/2021/10/10/Chrome%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2021-10-10T02:26:13.000Z</published>
    <updated>2021-10-10T03:27:59.341Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/10/10/Chrome%E5%BF%AB%E6%8D%B7%E9%94%AE/cb8065380cd791232b140067a0345982b2b78029.jpg" alt="cb8065380cd791232b140067a0345982b2b78029" style="zoom: 50%;"></p><span id="more"></span><h1 id="选项卡和窗口快捷方式"><a href="#选项卡和窗口快捷方式" class="headerlink" title="选项卡和窗口快捷方式"></a>选项卡和窗口快捷方式</h1><div class="table-container"><table><thead><tr><th style="text-align:center">含义</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">打开新窗口</td><td style="text-align:center">Ctrl+n</td></tr><tr><td style="text-align:center">在隐身模式下打开新窗口</td><td style="text-align:center">Ctrl+Shift+n</td></tr><tr><td style="text-align:center">打开并跳转到新选项卡</td><td style="text-align:center">Ctrl+t</td></tr><tr><td style="text-align:center">按照关闭的顺序重新打开之前的选项卡</td><td style="text-align:center">Ctrl+Shift+t</td></tr><tr><td style="text-align:center">跳转到下一个选项卡</td><td style="text-align:center">Ctrl+Tab或Ctrl+PgDn</td></tr><tr><td style="text-align:center">跳转到上一个选项卡</td><td style="text-align:center">Ctrl+Shift+Tab或Ctrl+PgUp</td></tr><tr><td style="text-align:center">跳到特定的选项卡</td><td style="text-align:center">Ctrl+1~8</td></tr><tr><td style="text-align:center">跳转到最后一个选项卡</td><td style="text-align:center">Ctrl+9</td></tr><tr><td style="text-align:center">在当前选项卡打开主页</td><td style="text-align:center">Alt+Home</td></tr><tr><td style="text-align:center">在当前选项卡打开浏览历史记录上一页</td><td style="text-align:center">Alt+←</td></tr><tr><td style="text-align:center">在当前选项卡打开浏览历史记录下一页</td><td style="text-align:center">Alt+→</td></tr><tr><td style="text-align:center">关闭当前选项卡</td><td style="text-align:center">Ctrl+F4或Ctrl+w</td></tr><tr><td style="text-align:center">关闭当前窗口</td><td style="text-align:center">Alt+F4或Ctrl+Shift+w</td></tr></tbody></table></div><h1 id="功能快捷方式"><a href="#功能快捷方式" class="headerlink" title="功能快捷方式"></a>功能快捷方式</h1><div class="table-container"><table><thead><tr><th style="text-align:center">含义</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">打开chrome菜单</td><td style="text-align:center">Alt+e或Alt+f</td></tr><tr><td style="text-align:center">显示或隐藏书签栏</td><td style="text-align:center">Ctrl+Shift+b</td></tr><tr><td style="text-align:center">打开书签管理器</td><td style="text-align:center">Ctrl+Shift+o</td></tr><tr><td style="text-align:center">在新选项卡打开历史记录页面</td><td style="text-align:center">Ctrl+h</td></tr><tr><td style="text-align:center">在新选项卡打开下载页面</td><td style="text-align:center">Ctrl+j</td></tr><tr><td style="text-align:center">打开chrome任务管理器</td><td style="text-align:center">Shift+Esc</td></tr><tr><td style="text-align:center">将焦点设置在chrome工具栏的第一项上</td><td style="text-align:center">Shift+Alt+t</td></tr><tr><td style="text-align:center">将焦点设置在chrome工具栏最右边的项目上</td><td style="text-align:center">F10</td></tr><tr><td style="text-align:center">将焦点切换到未聚焦的对话框和所有工具栏</td><td style="text-align:center">F6</td></tr><tr><td style="text-align:center">打开查找栏搜索当前页面</td><td style="text-align:center">Ctrl+f或F3</td></tr><tr><td style="text-align:center">跳转到查找栏搜索的下一个匹配项</td><td style="text-align:center">Ctrl+g</td></tr><tr><td style="text-align:center">跳转到查找栏搜索的上一个匹配项</td><td style="text-align:center">Ctrl+Shift+g</td></tr><tr><td style="text-align:center">打开开发者工具</td><td style="text-align:center">F12或Ctrl+Shift+j</td></tr><tr><td style="text-align:center">打开清除浏览数据选项</td><td style="text-align:center">Ctrl+Shift+Delete</td></tr><tr><td style="text-align:center">在新标签页中打开 chrome 帮助中心</td><td style="text-align:center">F1</td></tr><tr><td style="text-align:center">以不同的用户登录或以访客身份浏览</td><td style="text-align:center">Ctrl+Shift+m</td></tr><tr><td style="text-align:center">打开插入符号浏览</td><td style="text-align:center">F7</td></tr><tr><td style="text-align:center">打开反馈表</td><td style="text-align:center">Alt+Shift+i</td></tr></tbody></table></div><h1 id="地址栏快捷方式"><a href="#地址栏快捷方式" class="headerlink" title="地址栏快捷方式"></a>地址栏快捷方式</h1><div class="table-container"><table><thead><tr><th style="text-align:center">含义</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">添加<code>www.</code>和<code>.com</code>到站点名称，并在当前选项卡中打开它</td><td style="text-align:center">输入站点名称+ Ctrl + Enter</td></tr><tr><td style="text-align:center">打开一个新标签并执行搜索</td><td style="text-align:center">输入搜索词+Alt+Enter</td></tr><tr><td style="text-align:center">跳转到地址栏</td><td style="text-align:center">Ctrl+l或Alt+d或F6</td></tr><tr><td style="text-align:center">从页面上的任何位置搜索</td><td style="text-align:center">Ctrl+k或Ctrl+e</td></tr><tr><td style="text-align:center">从地址栏中删除预测</td><td style="text-align:center">选中该项+Shift+Delete</td></tr><tr><td style="text-align:center">将光标移动到地址栏</td><td style="text-align:center">Ctrl+F5</td></tr></tbody></table></div><h1 id="网页快捷方式"><a href="#网页快捷方式" class="headerlink" title="网页快捷方式"></a>网页快捷方式</h1><div class="table-container"><table><thead><tr><th style="text-align:center">含义</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">打印当前页面</td><td style="text-align:center">Ctrl + p</td></tr><tr><td style="text-align:center">保存当前页面</td><td style="text-align:center">Ctrl + s</td></tr><tr><td style="text-align:center">重新加载当前页面</td><td style="text-align:center">F5或Ctrl+r</td></tr><tr><td style="text-align:center">重新加载当前页面，忽略缓存内容</td><td style="text-align:center">Shift+F5或Ctrl+Shift+r</td></tr><tr><td style="text-align:center">停止页面加载</td><td style="text-align:center">Esc</td></tr><tr><td style="text-align:center">向前浏览可点击的项目</td><td style="text-align:center">Tab</td></tr><tr><td style="text-align:center">浏览向后移动的可点击项目</td><td style="text-align:center">Shift+Tab</td></tr><tr><td style="text-align:center">在 Chrome 中打开计算机中的文件</td><td style="text-align:center">Ctrl+o+选择一个文件</td></tr><tr><td style="text-align:center">显示当前页面的不可编辑的 HTML 源代码</td><td style="text-align:center">Ctrl+u</td></tr><tr><td style="text-align:center">将您当前的网页保存为书签</td><td style="text-align:center">Ctrl+d</td></tr><tr><td style="text-align:center">将所有打开的标签保存为新文件夹中的书签</td><td style="text-align:center">Ctrl+Shift+d</td></tr><tr><td style="text-align:center">打开或关闭全屏模式</td><td style="text-align:center">F11</td></tr><tr><td style="text-align:center">放大页面上的所有内容</td><td style="text-align:center">Ctrl++</td></tr><tr><td style="text-align:center">缩小页面上的所有内容</td><td style="text-align:center">Ctrl+-</td></tr><tr><td style="text-align:center">将页面上的所有内容恢复为默认大小</td><td style="text-align:center">Ctrl+0</td></tr><tr><td style="text-align:center">向下滚动网页，一次一个屏幕</td><td style="text-align:center">空格或PgDn</td></tr><tr><td style="text-align:center">向上滚动网页，一次一个屏幕</td><td style="text-align:center">Shift+空格或PgUp</td></tr><tr><td style="text-align:center">转到页面的顶部</td><td style="text-align:center">Home</td></tr><tr><td style="text-align:center">转到页面底部</td><td style="text-align:center">End</td></tr><tr><td style="text-align:center">在页面上水平滚动</td><td style="text-align:center">Shift+滚动鼠标滚轮</td></tr><tr><td style="text-align:center">将光标移动到文本字段中上一个单词的开头</td><td style="text-align:center">Ctrl+←</td></tr><tr><td style="text-align:center">将光标移动到下一个单词</td><td style="text-align:center">Ctrl+→</td></tr><tr><td style="text-align:center">删除文本字段中的上一个单词</td><td style="text-align:center">Ctrl+Backspace</td></tr></tbody></table></div><h1 id="鼠标快捷键"><a href="#鼠标快捷键" class="headerlink" title="鼠标快捷键"></a>鼠标快捷键</h1><div class="table-container"><table><thead><tr><th style="text-align:center">含义</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">在当前选项卡中打开链接</td><td style="text-align:center">将链接拖到选项卡</td></tr><tr><td style="text-align:center">在新的选项卡中打开链接</td><td style="text-align:center">Ctrl+单击链接</td></tr><tr><td style="text-align:center">在新的选项卡中打开链接，并跳转</td><td style="text-align:center">Ctrl+Shift+单击链接</td></tr><tr><td style="text-align:center">打开一个链接，并跳转（仅限鼠标）</td><td style="text-align:center">将链接拖到标签栏的空白区域</td></tr><tr><td style="text-align:center">在新窗口中打开链接</td><td style="text-align:center">Shift +单击链接</td></tr><tr><td style="text-align:center">在新窗口中打开选项卡（仅限鼠标）</td><td style="text-align:center">将标签拖出标签条</td></tr><tr><td style="text-align:center">将选项卡移动到当前窗口（仅限鼠标）</td><td style="text-align:center">将选项卡拖到现有窗口中</td></tr><tr><td style="text-align:center">将选项卡返回到其原始位置</td><td style="text-align:center">拖动时按Esc</td></tr><tr><td style="text-align:center">将当前网页保存为书签</td><td style="text-align:center">将网址拖到书签栏</td></tr><tr><td style="text-align:center">下载链接的目标</td><td style="text-align:center">Alt+单击链接</td></tr><tr><td style="text-align:center">显示您的浏览历史</td><td style="text-align:center">右键单击“返回”  或单击并按住“返回” <br>右键单击“下一步”  或单击并按住“下一步”</td></tr><tr><td style="text-align:center">在最大化和窗口模式之间切换</td><td style="text-align:center">双击标签条的空白区域</td></tr><tr><td style="text-align:center">放大页面</td><td style="text-align:center">Ctrl+向上滚动</td></tr><tr><td style="text-align:center">缩小页面</td><td style="text-align:center">Ctrl+向下滚动</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/10/10/Chrome%E5%BF%AB%E6%8D%B7%E9%94%AE/cb8065380cd791232b140067a0345982b2b78029.jpg&quot; alt=&quot;cb8065380cd791232b140067a0345982b2b78029&quot; style=&quot;zoom: 50%;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="快捷键" scheme="https://fsjz2020.github.io/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>Arduino学习</title>
    <link href="https://fsjz2020.github.io/2021/10/08/Arduino%E5%AD%A6%E4%B9%A0/"/>
    <id>https://fsjz2020.github.io/2021/10/08/Arduino%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-10-08T15:16:40.000Z</published>
    <updated>2022-01-06T03:16:23.261Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/10/08/Arduino%E5%AD%A6%E4%B9%A0/A000066_03.front_970c6014-61ab-4226-a20f-14cc6d8d682c_1000x750.jpg" alt="A000066_03.front_970c6014-61ab-4226-a20f-14cc6d8d682c_1000x750" style="zoom:50%;"></p><span id="more"></span><h1 id="Arduino-UNO"><a href="#Arduino-UNO" class="headerlink" title="Arduino UNO"></a>Arduino UNO</h1><p>解析图</p><p><img src="/2021/10/08/Arduino%E5%AD%A6%E4%B9%A0/image-20211008233333288.png" alt="image-20211008233333288"></p><ol><li>电源</li></ol><ul><li>通过USB供电，电压为5V；</li><li>通过DC电源输入接口供电，电压要求7~12V；</li><li>通过电源接口处5V或者VIN供电，5V端口处供电必须为5V，VIN端口处供电为7~12V；</li></ul><ol><li>指示灯</li></ol><ul><li>ON，电源指示灯</li><li>TX，串口发送指示灯</li><li>RX，串口接受指示灯</li><li>L，可编程指示灯，通过特殊电路连接到13号引脚，当13号引脚为<strong>高电平</strong>或<strong>高阻态</strong>时点亮，低电平时不会点亮</li></ul><ol><li>存储空间</li></ol><ul><li>FLASH 32KB 其中0.5KB作为BOOT区存放引导程序，实现串口下载的功能。另外的31.5KB存放程序</li><li>SRAM 2KB 内存</li><li>EEPROM 1KB 电可擦写的可编程只读存储器</li></ul><ol><li>输入/输出端口</li></ol><p><img src="/2021/10/08/Arduino%E5%AD%A6%E4%B9%A0/Pinout-UNOrev3_latest.png" alt="Pinout-UNOrev3_latest"></p><ul><li>UART通信，为0（RX）和1（TX）引脚，用于接收和发送串口数据，这两个引脚通过连接到ATmega16U2与计算机通信</li><li>外部中断，为2和3引脚，可以输入外部中断信号</li><li>PWM输出，为3、5、6、9、10和11引脚，可以输出PWM波</li><li>SPI通信，为10（SS）、11（MOSI），12（MISO）和13（SCK）引脚，可用于SPI通信</li><li>TWI通信，为A4（SDA），A5（SCL）引脚和TWI接口，可用于TWI通信，兼容IIC通信</li><li>AREF，模拟输入参考电压的输入端口</li><li>RESET，复位端口，接低电平会使Arduino复位</li></ul><h1 id="Arduino语言及程序结构"><a href="#Arduino语言及程序结构" class="headerlink" title="Arduino语言及程序结构"></a>Arduino语言及程序结构</h1><p><strong>pinMode(pin,value)</strong></p><blockquote><p>pinMode有三种模式</p><p>INPUT(0)                输入模式</p><p>OUTPUT(1)            输出模式</p><p>INPUT_PULLUP    输入上拉模式</p></blockquote><p><strong>digitalWrite(pin,value)</strong></p><blockquote><p>value的值</p><p>HIGH(1):高电平</p><p>LOW(0):低电平</p></blockquote><p><strong>digitalRead(pin)</strong></p><blockquote><p>将-0.5~1.5V的输入电压作为低电平</p><p>将3~5.5v的输入电压作为高电平</p></blockquote><h2 id="模拟量"><a href="#模拟量" class="headerlink" title="模拟量"></a>模拟量</h2><p><strong>analogRead(A0)</strong></p><blockquote><p>Arduino有十位精度，5v电压可分为0~1023</p></blockquote><p><strong>analogWrite</strong>(9)</p><blockquote><p>Arduino的模拟量输出不需要再setup()中声明，采用的是PWM方式模拟的电压输出，范围为0~255。</p></blockquote><h2 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Serial.begin(9600)</span><br></pre></td></tr></table></figure><p>规定串口通信波特率，可用300、600、1200、2400、4800、9600、14400、19200、28800、38400、57600、115200，单位是(bit)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Serial.<span class="built_in">print</span>(val);</span><br><span class="line">Serial.<span class="built_in">println</span>(val);<span class="comment">//与print不同的是，println输出完之后输出一组回车换行符</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Serial.read()</span><br></pre></td></tr></table></figure><p>调用该语句，每次返回1字节的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">millis()</span><br></pre></td></tr></table></figure><p>该函数返回Arduino从通电（或复位）到现在的时间，单位为毫秒，类型为unsigned long大概50天会溢出一次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">micros()</span><br></pre></td></tr></table></figure><p>该函数返回系统运行时间，单位是微秒，约70分钟溢出一次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delay(1000)</span><br></pre></td></tr></table></figure><p>此函数为毫秒级延时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delayMicroseconds()</span><br></pre></td></tr></table></figure><p>此函数为微秒级延时</p><h1 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/10/08/Arduino%E5%AD%A6%E4%B9%A0/A000066_03.front_970c6014-61ab-4226-a20f-14cc6d8d682c_1000x750.jpg&quot; alt=&quot;A000066_03.front_970c6014-61ab-4226-a20f-14cc6d8d682c_1000x750&quot; style=&quot;zoom:50%;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Arduino" scheme="https://fsjz2020.github.io/tags/Arduino/"/>
    
    <category term="单片机" scheme="https://fsjz2020.github.io/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>pillow学习[也许会停更一段时间]</title>
    <link href="https://fsjz2020.github.io/2021/10/01/pillow%E5%AD%A6%E4%B9%A0/"/>
    <id>https://fsjz2020.github.io/2021/10/01/pillow%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-10-01T13:36:12.000Z</published>
    <updated>2022-07-02T08:47:47.416Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>pillow和PIL不能共存，安装pillow前，请先卸载PIL</p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im=Image.<span class="built_in">open</span>(<span class="string">&#x27;test.png&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(im.<span class="built_in">format</span>,im.size,im.mode)</span><br></pre></td></tr></table></figure><p><code>format</code>为文件的格式，<code>size</code>为图像的大小，<code>mode</code>为图像的色彩格式，常见的有“L”（灰度图像），“CMYK”（打印图像），“RGB”（真彩色图像）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">im.show()<span class="comment">#显示图像,调用系统安装的图片显示软件</span></span><br></pre></td></tr></table></figure><h1 id="取出图像中的一部分区域"><a href="#取出图像中的一部分区域" class="headerlink" title="取出图像中的一部分区域"></a>取出图像中的一部分区域</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br><span class="line">a = im.crop((<span class="number">200</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">400</span>))</span><br><span class="line">a.show()</span><br></pre></td></tr></table></figure><h1 id="合并图像"><a href="#合并图像" class="headerlink" title="合并图像"></a>合并图像</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">10</span></span><br><span class="line">j = <span class="number">10</span></span><br><span class="line">a = Image.new(<span class="string">&quot;RGBA&quot;</span>, (i*im.size[<span class="number">0</span>], j*im.size[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        a.paste(im, (i*<span class="number">500</span>, j*<span class="number">281</span>, (i+<span class="number">1</span>)*<span class="number">500</span>, (j+<span class="number">1</span>)*<span class="number">281</span>))</span><br><span class="line">a.show()</span><br></pre></td></tr></table></figure><p><img src="/2021/10/01/pillow%E5%AD%A6%E4%B9%A0/test.jpg" alt="test"></p><h1 id="几何变换"><a href="#几何变换" class="headerlink" title="几何变换"></a>几何变换</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">im.resize((<span class="number">1000</span>,<span class="number">1000</span>))</span><br><span class="line">im.rotate(<span class="number">45</span>)</span><br><span class="line">im.transpose(Image.ROTATE_90)</span><br><span class="line">im.transpose(Image.FLIP_LEFT_RIGHT)</span><br></pre></td></tr></table></figure><p><b style="color:#50BF0A">python</b>的and语法</p><blockquote><p>t=a and b</p><p>若a和b都为真则返回b</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;pillow和PIL不能共存，安装pillow前，请先卸载PIL&lt;</summary>
      
    
    
    
    
    <category term="python" scheme="https://fsjz2020.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用PyAutoGui操作键盘和鼠标</title>
    <link href="https://fsjz2020.github.io/2021/09/28/%E4%BD%BF%E7%94%A8pyautogui%E6%93%8D%E4%BD%9C%E9%94%AE%E7%9B%98%E5%92%8C%E9%BC%A0%E6%A0%87/"/>
    <id>https://fsjz2020.github.io/2021/09/28/%E4%BD%BF%E7%94%A8pyautogui%E6%93%8D%E4%BD%9C%E9%94%AE%E7%9B%98%E5%92%8C%E9%BC%A0%E6%A0%87/</id>
    <published>2021-09-28T15:56:56.000Z</published>
    <updated>2021-10-01T07:08:13.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>PyAutoGui</strong>是一个可以控制鼠标和键盘的python库，当需要完成一些繁琐且重复的工作时，可以使用这个库来帮助完成</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyautogui</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><strong>导入</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br></pre></td></tr></table></figure><p><strong>故障安全</strong></p><p>如果鼠标位于主监视器的四个角的任意一个时，它将触发<code>pyautogui.FailSafeException</code>，调用每个PyAutoGui函数时，有0.1s的延迟可以将鼠标移动到四个角中的任意一个位置，这个延迟的时间可由<code>pyautogui.PAUSE</code>设置，如果不需要故障保护可以设置<code>pyautogui.FAILSAFE=FALSE</code></p><h2 id="鼠标控制功能"><a href="#鼠标控制功能" class="headerlink" title="鼠标控制功能"></a>鼠标控制功能</h2><h3 id="屏幕和鼠标位置"><a href="#屏幕和鼠标位置" class="headerlink" title="屏幕和鼠标位置"></a>屏幕和鼠标位置</h3><p>屏幕上的位置由笛卡尔坐标引用，原点位于左上角处，X和Y均是从0开始</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0,0       X increases --&gt;</span><br><span class="line">+---------------------------+</span><br><span class="line">|                           | Y increases</span><br><span class="line">|                           |     |</span><br><span class="line">|   1920 x 1080 screen      |     |</span><br><span class="line">|                           |     V</span><br><span class="line">|                           |</span><br><span class="line">|                           |</span><br><span class="line">+---------------------------+ 1919, 1079</span><br></pre></td></tr></table></figure><p>所以1920*1080的屏幕右下角像素为（1919，1079）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.size()<span class="comment">#获取屏幕的大小</span></span><br><span class="line">Size(width=<span class="number">1920</span>, height=<span class="number">1080</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.position()<span class="comment">#获取鼠标的位置</span></span><br><span class="line">Point(x=<span class="number">1253</span>, y=<span class="number">604</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.onScreen(<span class="number">1111</span>,<span class="number">123</span>)<span class="comment">#检测某点是否在屏幕上</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.onScreen(<span class="number">1111</span>,<span class="number">1234</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="鼠标移动"><a href="#鼠标移动" class="headerlink" title="鼠标移动"></a>鼠标移动</h3><p>鼠标移动使用<code>moveTo</code>功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;pyautogui.moveTo(<span class="number">100</span>,<span class="number">200</span>,<span class="number">1</span>)<span class="comment">#移动到100，200处，移动的时间为1s</span></span><br></pre></td></tr></table></figure><p>如果参数是<code>None</code>，则该处坐标使用之前鼠标的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;pyautogui.moveTo(<span class="literal">None</span>,<span class="number">500</span>)<span class="comment">#X坐标使用之前鼠标位置的X坐标，Y移动到500</span></span><br></pre></td></tr></table></figure><p><code>move()</code>函数是将坐标移动到相对之前位置的几个像素上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;pyautogui.moveTo(<span class="number">100</span>,<span class="number">200</span>)<span class="comment">#将光标移动到（100，200）</span></span><br><span class="line">&gt;&gt;&gt;pyautogui.move(<span class="number">0</span>,<span class="number">50</span>)<span class="comment">#将光标移动到（100，250）等价于pyautogui.move(None,50)</span></span><br></pre></td></tr></table></figure><h3 id="鼠标拖动"><a href="#鼠标拖动" class="headerlink" title="鼠标拖动"></a>鼠标拖动</h3><p>鼠标拖动有函数<code>dragTo()</code>、<code>drag()</code>，除此之外还有一个button关键字，用来设置用什么键拖动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;pyautogui.dragTo(<span class="number">100</span>,<span class="number">200</span>,<span class="number">2</span>,button=<span class="string">&#x27;left&#x27;</span>)<span class="comment">#将鼠标左键在2s拖动到（100，200）</span></span><br></pre></td></tr></table></figure><h3 id="补间-缓动函数"><a href="#补间-缓动函数" class="headerlink" title="补间/缓动函数"></a>补间/缓动函数</h3><p>使用该函数可以让光标在移动过程中的速度发生变化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.moveTo(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>, pyautogui.easeInQuad)     <span class="comment">#开始慢，后边快</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.moveTo(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>, pyautogui.easeOutQuad)    <span class="comment">#开始快，后边慢</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.moveTo(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>, pyautogui.easeInOutQuad)  <span class="comment">#开始和后边慢，中间快</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.moveTo(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>, pyautogui.easeInBounce)   <span class="comment">#像皮球在地面反弹一样逐渐移动到终点</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.moveTo(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>, pyautogui.easeInElastic) <span class="comment">#左右震荡到终点</span></span><br></pre></td></tr></table></figure><p>更多参考<a href="https://pypi.python.org/pypi/PyTweening">https://pypi.python.org/pypi/PyTweening</a></p><h3 id="鼠标点击"><a href="#鼠标点击" class="headerlink" title="鼠标点击"></a>鼠标点击</h3><p>点击函数为<code>click()</code>，默认为点击左键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;pyautogui.click(x=<span class="number">100</span>,y=<span class="number">200</span>,button=<span class="string">&#x27;right&#x27;</span>，clicks=<span class="number">2</span>,interval=<span class="number">0.25</span>)<span class="comment">#点击（100，200）位置处，右键双击，两次按键之间相隔0.25s</span></span><br></pre></td></tr></table></figure><p>此外还有<code>doubleClick()</code>和<code>tripleClick()</code>，参数类似。除此之外还有<code>rightClick()</code>函数，参数也类似</p><h3 id="mouseDown-和mouseUp"><a href="#mouseDown-和mouseUp" class="headerlink" title="mouseDown()和mouseUp()"></a>mouseDown()和mouseUp()</h3><p>鼠标按下和松开分别用<code>mouseDown()</code>和<code>mouseUp()</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.mouseDown(x=<span class="number">200</span>,y=<span class="number">200</span>,button=<span class="string">&#x27;right&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="鼠标滚动"><a href="#鼠标滚动" class="headerlink" title="鼠标滚动"></a>鼠标滚动</h3><p>鼠标滚动使用<code>scroll</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.scroll(<span class="number">500</span>,x=<span class="number">100</span>,y=<span class="number">200</span>)<span class="comment">#光标移动到（100，200）处，页面向上滚500像素</span></span><br></pre></td></tr></table></figure><h2 id="键盘控制功能"><a href="#键盘控制功能" class="headerlink" title="键盘控制功能"></a>键盘控制功能</h2><h3 id="write-函数"><a href="#write-函数" class="headerlink" title="write()函数"></a>write()函数</h3><p>此函数将键入传递的字符串中的字符，要在每个字符键入时添加延迟间隔可以使用<code>interval</code>参数，这个函数一次只能键入一个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.write(<span class="string">&quot;Hello World!&quot;</span>,interval=<span class="number">0.25</span>)</span><br></pre></td></tr></table></figure><h3 id="press-、keyDown-、keyUp-函数"><a href="#press-、keyDown-、keyUp-函数" class="headerlink" title="press()、keyDown()、keyUp()函数"></a>press()、keyDown()、keyUp()函数</h3><p><code>press()</code>按下一个键然后松开它，<code>keyDown()</code>按住某个键，<code>keyUp()</code>松开某个键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.keyDown(<span class="string">&#x27;shift&#x27;</span>) <span class="comment">#按住shift </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.press(<span class="string">&#x27;left&#x27;</span>, presses = <span class="number">3</span>， interval=<span class="number">1</span>)<span class="comment">#按下left键3次，每次间隔1秒</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.press(<span class="string">&#x27;left&#x27;</span>)     </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.press(<span class="string">&#x27;left&#x27;</span>)     </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.keyUp(<span class="string">&#x27;shift&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.press([<span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;left&#x27;</span>])<span class="comment">#将要输入的键一起放到一个数组中</span></span><br></pre></td></tr></table></figure><h3 id="hold-上下文管理器"><a href="#hold-上下文管理器" class="headerlink" title="hold()上下文管理器"></a>hold()上下文管理器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> pyautogui.hold(<span class="string">&#x27;shift&#x27;</span>):</span><br><span class="line">        pyautogui.press([<span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;left&#x27;</span>])</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.keyDown(<span class="string">&#x27;shift&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.press(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.press(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.press(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.keyUp(<span class="string">&#x27;shift&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="hotkey-函数"><a href="#hotkey-函数" class="headerlink" title="hotkey()函数"></a>hotkey()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.hotkey(<span class="string">&#x27;ctrl&#x27;</span>, <span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;esc&#x27;</span>)</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.keyDown(<span class="string">&#x27;ctrl&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.keyDown(<span class="string">&#x27;shift&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.keyDown(<span class="string">&#x27;esc&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.keyUp(<span class="string">&#x27;esc&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.keyUp(<span class="string">&#x27;shift&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.keyUp(<span class="string">&#x27;ctrl&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;\t&#x27;, &#x27;\n&#x27;, &#x27;\r&#x27;, &#x27; &#x27;, &#x27;!&#x27;, &#x27;&quot;&#x27;, &#x27;#&#x27;, &#x27;$&#x27;, &#x27;%&#x27;, &#x27;&amp;&#x27;, &quot;&#x27;&quot;, &#x27;(&#x27;,</span><br><span class="line">&#x27;)&#x27;, &#x27;*&#x27;, &#x27;+&#x27;, &#x27;,&#x27;, &#x27;-&#x27;, &#x27;.&#x27;, &#x27;/&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;,</span><br><span class="line">&#x27;8&#x27;, &#x27;9&#x27;, &#x27;:&#x27;, &#x27;;&#x27;, &#x27;&lt;&#x27;, &#x27;=&#x27;, &#x27;&gt;&#x27;, &#x27;?&#x27;, &#x27;@&#x27;, &#x27;[&#x27;, &#x27;\\&#x27;, &#x27;]&#x27;, &#x27;^&#x27;, &#x27;_&#x27;, &#x27;`&#x27;,</span><br><span class="line">&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;,&#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;o&#x27;,</span><br><span class="line">&#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;u&#x27;, &#x27;v&#x27;, &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;&#123;&#x27;, &#x27;|&#x27;, &#x27;&#125;&#x27;, &#x27;~&#x27;,</span><br><span class="line">&#x27;accept&#x27;, &#x27;add&#x27;, &#x27;alt&#x27;, &#x27;altleft&#x27;, &#x27;altright&#x27;, &#x27;apps&#x27;, &#x27;backspace&#x27;,</span><br><span class="line">&#x27;browserback&#x27;, &#x27;browserfavorites&#x27;, &#x27;browserforward&#x27;, &#x27;browserhome&#x27;,</span><br><span class="line">&#x27;browserrefresh&#x27;, &#x27;browsersearch&#x27;, &#x27;browserstop&#x27;, &#x27;capslock&#x27;, &#x27;clear&#x27;,</span><br><span class="line">&#x27;convert&#x27;, &#x27;ctrl&#x27;, &#x27;ctrlleft&#x27;, &#x27;ctrlright&#x27;, &#x27;decimal&#x27;, &#x27;del&#x27;, &#x27;delete&#x27;,</span><br><span class="line">&#x27;divide&#x27;, &#x27;down&#x27;, &#x27;end&#x27;, &#x27;enter&#x27;, &#x27;esc&#x27;, &#x27;escape&#x27;, &#x27;execute&#x27;, &#x27;f1&#x27;, &#x27;f10&#x27;,</span><br><span class="line">&#x27;f11&#x27;, &#x27;f12&#x27;, &#x27;f13&#x27;, &#x27;f14&#x27;, &#x27;f15&#x27;, &#x27;f16&#x27;, &#x27;f17&#x27;, &#x27;f18&#x27;, &#x27;f19&#x27;, &#x27;f2&#x27;, &#x27;f20&#x27;,</span><br><span class="line">&#x27;f21&#x27;, &#x27;f22&#x27;, &#x27;f23&#x27;, &#x27;f24&#x27;, &#x27;f3&#x27;, &#x27;f4&#x27;, &#x27;f5&#x27;, &#x27;f6&#x27;, &#x27;f7&#x27;, &#x27;f8&#x27;, &#x27;f9&#x27;,</span><br><span class="line">&#x27;final&#x27;, &#x27;fn&#x27;, &#x27;hanguel&#x27;, &#x27;hangul&#x27;, &#x27;hanja&#x27;, &#x27;help&#x27;, &#x27;home&#x27;, &#x27;insert&#x27;, &#x27;junja&#x27;,</span><br><span class="line">&#x27;kana&#x27;, &#x27;kanji&#x27;, &#x27;launchapp1&#x27;, &#x27;launchapp2&#x27;, &#x27;launchmail&#x27;,</span><br><span class="line">&#x27;launchmediaselect&#x27;, &#x27;left&#x27;, &#x27;modechange&#x27;, &#x27;multiply&#x27;, &#x27;nexttrack&#x27;,</span><br><span class="line">&#x27;nonconvert&#x27;, &#x27;num0&#x27;, &#x27;num1&#x27;, &#x27;num2&#x27;, &#x27;num3&#x27;, &#x27;num4&#x27;, &#x27;num5&#x27;, &#x27;num6&#x27;,</span><br><span class="line">&#x27;num7&#x27;, &#x27;num8&#x27;, &#x27;num9&#x27;, &#x27;numlock&#x27;, &#x27;pagedown&#x27;, &#x27;pageup&#x27;, &#x27;pause&#x27;, &#x27;pgdn&#x27;,</span><br><span class="line">&#x27;pgup&#x27;, &#x27;playpause&#x27;, &#x27;prevtrack&#x27;, &#x27;print&#x27;, &#x27;printscreen&#x27;, &#x27;prntscrn&#x27;,</span><br><span class="line">&#x27;prtsc&#x27;, &#x27;prtscr&#x27;, &#x27;return&#x27;, &#x27;right&#x27;, &#x27;scrolllock&#x27;, &#x27;select&#x27;, &#x27;separator&#x27;,</span><br><span class="line">&#x27;shift&#x27;, &#x27;shiftleft&#x27;, &#x27;shiftright&#x27;, &#x27;sleep&#x27;, &#x27;space&#x27;, &#x27;stop&#x27;, &#x27;subtract&#x27;, &#x27;tab&#x27;,</span><br><span class="line">&#x27;up&#x27;, &#x27;volumedown&#x27;, &#x27;volumemute&#x27;, &#x27;volumeup&#x27;, &#x27;win&#x27;, &#x27;winleft&#x27;, &#x27;winright&#x27;, &#x27;yen&#x27;,</span><br><span class="line">&#x27;command&#x27;, &#x27;option&#x27;, &#x27;optionleft&#x27;, &#x27;optionright&#x27;]</span><br></pre></td></tr></table></figure><h2 id="消息框功能"><a href="#消息框功能" class="headerlink" title="消息框功能"></a>消息框功能</h2><p>PyAutoGui提供了四种消息框功能</p><h3 id="alert-函数"><a href="#alert-函数" class="headerlink" title="alert()函数"></a>alert()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.alert(button=<span class="string">&quot;OK&quot;</span>,text=<span class="string">&quot;text&quot;</span>,title=<span class="string">&quot;title&quot;</span>)</span><br></pre></td></tr></table></figure><p>显示效果：</p><p><img src="/2021/09/28/%E4%BD%BF%E7%94%A8pyautogui%E6%93%8D%E4%BD%9C%E9%94%AE%E7%9B%98%E5%92%8C%E9%BC%A0%E6%A0%87/image-20211001112614755.png" alt="image-20211001112614755"></p><h3 id="confirm-函数"><a href="#confirm-函数" class="headerlink" title="confirm()函数"></a>confirm()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.confirm(text=<span class="string">&quot;test&quot;</span>,title=<span class="string">&quot;title&quot;</span>,buttons=[<span class="string">&#x27;OK&#x27;</span>,<span class="string">&#x27;Cancel&#x27;</span>，<span class="string">&#x27;none&#x27;</span>])<span class="comment">#注意这里是buttons，即可以设置多个按键</span></span><br></pre></td></tr></table></figure><p>显示效果：</p><p><img src="/2021/09/28/%E4%BD%BF%E7%94%A8pyautogui%E6%93%8D%E4%BD%9C%E9%94%AE%E7%9B%98%E5%92%8C%E9%BC%A0%E6%A0%87/image-20211001112527494.png" alt="image-20211001112527494"></p><h3 id="prompt-函数"><a href="#prompt-函数" class="headerlink" title="prompt()函数"></a>prompt()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.prompt(text=<span class="string">&quot;test&quot;</span>,title=<span class="string">&quot;title&quot;</span>,default=<span class="string">&quot;ewrw&quot;</span>)</span><br></pre></td></tr></table></figure><p>显示效果：</p><p><img src="/2021/09/28/%E4%BD%BF%E7%94%A8pyautogui%E6%93%8D%E4%BD%9C%E9%94%AE%E7%9B%98%E5%92%8C%E9%BC%A0%E6%A0%87/image-20211001112352356.png" alt="image-20211001112352356"></p><h3 id="password-函数"><a href="#password-函数" class="headerlink" title="password()函数"></a>password()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.password(text=<span class="string">&#x27;test&#x27;</span>,title=<span class="string">&#x27;title&#x27;</span>,default=<span class="string">&#x27;123&#x27;</span>,mask=<span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><p>显示效果：</p><p><img src="/2021/09/28/%E4%BD%BF%E7%94%A8pyautogui%E6%93%8D%E4%BD%9C%E9%94%AE%E7%9B%98%E5%92%8C%E9%BC%A0%E6%A0%87/image-20211001112813953.png" alt="image-20211001112813953"></p><p>如果按取消则返回None</p><h2 id="截图功能"><a href="#截图功能" class="headerlink" title="截图功能"></a>截图功能</h2><p>pyautogui的截图功能使用的是pillow模块</p><h3 id="截图函数"><a href="#截图函数" class="headerlink" title="截图函数"></a>截图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>im1 = pyautogui.screenshot()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>im2 = pyautogui.screenshot(<span class="string">&#x27;my_screenshot.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果参数传递文件名字符串则将截图保存到文件，并且返回image图像</p><p>在1920*1080屏幕上，screenshot函数大约需要100毫秒（实测约36ms）</p><p>可以用region来选取截图的范围</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>im = pyautogui.screenshot(region=(<span class="number">0</span>,<span class="number">0</span>, <span class="number">300</span>, <span class="number">400</span>))<span class="comment">#参数分别起始点坐标和宽，高</span></span><br></pre></td></tr></table></figure><h3 id="定位功能"><a href="#定位功能" class="headerlink" title="定位功能"></a>定位功能</h3><p>如果你有要点击窗口的某个位置，但是这个按钮的位置随每次打开窗口都在发生变化。只要你有这个按钮的图像可以通过<code>locateOnScreen()</code>函数查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui <span class="keyword">as</span> pag</span><br><span class="line">g = pag.locateOnScreen(<span class="string">&#x27;test.png&#x27;</span>)</span><br><span class="line">g = pag.center(g)<span class="comment">#求要点击图像的中心位置</span></span><br><span class="line">pag.doubleClick(g)</span><br><span class="line">pag.click(<span class="string">&#x27;test.png&#x27;</span>)<span class="comment">#简便写法</span></span><br></pre></td></tr></table></figure><p>如果找不到图像则返回None</p><p>可选参数<code>confidence</code>(需安装OpenCV)，用于设置因为像素点差异而引起的无法找到图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = pyautogui.locateCenterOnScreen(<span class="string">&#x27;test.png&#x27;</span>)<span class="comment">#该函数结合了locateOnScreen()和center()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.click(x, y)</span><br></pre></td></tr></table></figure><p>定位功能实际使用大约需要200ms(将PAUSE时间取消)</p><p>如果要找到全部图像则使用<code>locateAllOnScreen()</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> pos <span class="keyword">in</span> pyautogui.locateAllOnScreen(<span class="string">&#x27;test.png&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>  <span class="built_in">print</span>(pos)</span><br><span class="line">...</span><br><span class="line">(<span class="number">1101</span>, <span class="number">252</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">(<span class="number">59</span>, <span class="number">481</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">(<span class="number">1395</span>, <span class="number">640</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">(<span class="number">1838</span>, <span class="number">676</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(pyautogui.locateAllOnScreen(<span class="string">&#x27;test.png&#x27;</span>))</span><br><span class="line">[(<span class="number">1101</span>, <span class="number">252</span>, <span class="number">50</span>, <span class="number">50</span>), (<span class="number">59</span>, <span class="number">481</span>, <span class="number">50</span>, <span class="number">50</span>), (<span class="number">1395</span>, <span class="number">640</span>, <span class="number">50</span>, <span class="number">50</span>), (<span class="number">1838</span>, <span class="number">676</span>, <span class="number">50</span>, <span class="number">50</span>)]</span><br></pre></td></tr></table></figure><blockquote><p>定位功能非常耗时，最好的方法就是传递一个region参数来限制搜索区域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.locateOnScreen(<span class="string">&#x27;test.png&#x27;</span>, region=(<span class="number">0</span>,<span class="number">0</span>, <span class="number">300</span>, <span class="number">400</span>))</span><br></pre></td></tr></table></figure></blockquote><h3 id="灰度匹配"><a href="#灰度匹配" class="headerlink" title="灰度匹配"></a>灰度匹配</h3><p>可以传递grayscale=True给locate函数加速(大约30%左右)，这会加快定位速度，但可能导致误报匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = pyautogui.locateOnScreen(<span class="string">&#x27;test.png&#x27;</span>, grayscale=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">(<span class="number">1416</span>, <span class="number">562</span>, <span class="number">50</span>, <span class="number">41</span>)</span><br></pre></td></tr></table></figure><h3 id="像素匹配"><a href="#像素匹配" class="headerlink" title="像素匹配"></a>像素匹配</h3><p>要获取屏幕中像素的RGB颜色可以使用<code>getpixel()</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>im = pyautogui.screenshot()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>im.getpixel((<span class="number">100</span>, <span class="number">200</span>))</span><br><span class="line">(<span class="number">130</span>, <span class="number">135</span>, <span class="number">144</span>)</span><br></pre></td></tr></table></figure><p>或作为单个函数调用<code>pixel()</code>函数，偶尔会报错，不稳定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pix = pyautogui.pixel(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pix</span><br><span class="line">RGB(red=<span class="number">130</span>, green=<span class="number">135</span>, blue=<span class="number">144</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pix[<span class="number">0</span>]</span><br><span class="line"><span class="number">130</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pix.red</span><br><span class="line"><span class="number">130</span></span><br></pre></td></tr></table></figure><p>如果要验证某点像素值与给定像素是否匹配，则可以调用<code>pixelMatchesColor()</code>函数，<code>tolerance</code>为像素值匹配时可以变化的程度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.pixelMatchesColor(<span class="number">100</span>, <span class="number">200</span>, (<span class="number">130</span>, <span class="number">135</span>, <span class="number">144</span>))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.pixelMatchesColor(<span class="number">100</span>, <span class="number">200</span>, (<span class="number">140</span>, <span class="number">125</span>, <span class="number">134</span>))</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pyautogui.pixelMatchesColor(<span class="number">100</span>, <span class="number">200</span>, (<span class="number">140</span>, <span class="number">125</span>, <span class="number">134</span>), tolerance=<span class="number">10</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;PyAutoGui&lt;/strong&gt;是一个可以控制鼠标和键盘的python库，当需要完成一些繁琐且重复的工作时，可以使用这个库来帮助完成&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://fsjz2020.github.io/tags/python/"/>
    
  </entry>
  
</feed>
